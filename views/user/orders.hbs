
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* A simple style for better theme demonstration */
        body {
            background-color: #111827;
            /* bg-gray-900 */
        }

        /* gray-700 */

        /* Simple scrollbar hiding utility */
        .hide-scrollbar::-webkit-scrollbar {
            display: none;
        }

        .button-wrapper{
            position: absolute;
        }

        .hide-scrollbar {
            -ms-overflow-style: none;
            /* IE and Edge */
            scrollbar-width: none;
            /* Firefox */
        }

        @media (max-width:724px) {
            .button-wrapper{
                position: relative;
                margin-top: 34px;
                margin-left: 12px;
            }
        }
    </style>
<input type="text" id="focusIndicator" value="myorders" hidden>
    <div class="w-full lg:w-4/5 max-w-4xl">
        <h2 class="text-3xl font-bold text-text-light mb-6">My Orders</h2>
        <div class="relative mb-5">
            <input type="text" placeholder="Order Id"
                class="w-full bg-[#1E1E1E] border border-[#404044] rounded-lg py-3 px-4 text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-purple-500"
                id="search-input">
            <div class="button-wrapper right-2 top-1/2 -translate-y-1/2">
                <button class=" bg-purple-600 hover:bg-purple-700 text-white px-6 py-2 rounded-md font-semibold" type="button"
                    id="search-btn">Search</button>
                <button class=" bg-gray-600 hover:bg-gray-700 text-white px-6 py-2 rounded-md font-semibold"
                    id="clear-btn">Clear</button>
            </div>
        </div>

        <!-- Container for dynamically loaded orders -->
        <div class="space-y-6" id="order-container">
            <!-- Orders will be loaded here by JavaScript -->
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            
            let currentPage = 1;
            const ordersPerPage = 5; 

            
            const orderContainer = document.getElementById("order-container");

           
            const fetchAndRenderOrders = async (page, search) => {
                
                currentPage = page;

                
                orderContainer.innerHTML = `<p class="text-text-medium text-center text-lg">Loading your orders...</p>`;

                try {
                    
                    const response = await fetch(`/orders/details?page=${page}&limit=${ordersPerPage}&search=${search||null}`);

                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }

                    
                    const data = await response.json();
                    console.log(data)

                    const orders = data.orders;
                    const totalOrders = data.totalOrders;

                    // Clear loading message
                    orderContainer.innerHTML = '';

                    if (!orders || orders.length === 0) {
                        orderContainer.innerHTML = `<p class="text-text-medium text-center text-lg">You have no orders yet.</p>`;
                        return;
                    }

                    
                    renderOrders(orders);

                } catch (error) {
                    console.error("Failed to fetch orders:", error);
                    orderContainer.innerHTML = `<p class="text-red-500 text-center text-lg">Sorry, we couldn't load your orders. Please try again later.</p>`;
                }
            };

    
            const renderOrders = (orders) => {
                let html = '';
                orders.forEach(product => {
                    let items = '';
                    product.orderedItems.forEach(item => {
                        console.log(item)
                        if(item.status == "cancelled"){
                            items += `
                                <div class="rounded-md p-2 flex items-center gap-4 mt-2 opacity-[0.4] relative">
                                    <h3 class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-sm font-semibold text-red-500">Cancelled</h3>
                                    <div class="aspect-square rounded-md overflow-hidden w-10 h-10 flex-shrink-0">
                                        <img src="${item.thumbnail}" alt="${item.name}" class="w-full h-full object-cover">
                                    </div>
                                    <div class="flex-grow">
                                        <h3 class="text-sm font-semibold text-text-light">${item.name}</h3>
                                    </div>
                                </div>
                            `;
                        }else{

                            items += `
                                <div class="rounded-md p-2 flex items-center gap-4 mt-2">
                                    <div class="aspect-square rounded-md overflow-hidden w-10 h-10 flex-shrink-0">
                                        <img src="${item.thumbnail}" alt="${item.name}" class="w-full h-full object-cover">
                                    </div>
                                    <div class="flex-grow">
                                        <h3 class="text-sm font-semibold text-text-light">${item.name}</h3>
                                    </div>
                                </div>
                            `;
                        }
                    });

                    // Determine status color
                    let statusStyles = {
                        "proccessing": "bg-gray-800 text-gray-400",
                        "shipped": "bg-orange-900/50 text-orange-400",
                        "out for delivery": "bg-yellow-900/50 text-yellow-400",
                        "delivered": "bg-green-900/50 text-green-400",
                        "cancelled": "bg-red-900/50 text-red-400",
                        "payment failed": "bg-red-900/50 text-red-400",
                        "returned" : "bg-blue-900/50 text-blue-400"
                    };
                    let style = statusStyles[product.status.toLowerCase()] || statusStyles["proccessing"];

                    if(product.status == "cancelled"){
                        html += `
                            <div class="opacity-[0.4] bg-card-bg border border-border-color rounded-xl p-4 sm:p-6 flex flex-col relative" id="order-data" data-orderid="${product.orderId}">
                                <h3 class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-lg md:text-xl font-semibold text-red-500">Cancelled</h3>
                                <div class="flex flex-wrap justify-between items-start gap-2 mb-4">
                                    <div>
                                        <h3 class="text-lg md:text-xl font-semibold text-text-light">Order ID: ${product.orderId}</h3>
                                        <p class="text-sm text-text-medium mt-1"><span class="font-medium">Order Date:</span> ${new Date(product.createdAt).toLocaleDateString()}</p>
                                    </div>
                                    <span class="text-xs sm:text-sm font-semibold ${style} rounded-full px-3 py-1 capitalize">${product.status}</span>
                                </div>
                                
                                <div class="border-t border-border-color pt-4">
                                    <p class="text-base text-text-light mb-2 font-semibold">Items</p>
                                    <div class="space-y-2">${items}</div>
                                </div>
                                
                                <div class="border-t border-border-color mt-4 pt-4 space-y-2 text-sm">
                                    <p class="text-text-medium flex justify-between">Sub Total: <span>₹${product.subTotal}</span></p>
                                    <p class="text-text-medium flex justify-between">Delivery Charge: <span>₹${product.deliveryCharge}</span></p>
                                    <p class="text-red-500 flex justify-between">Discount: <span>-₹${product.discount}</span></p>
                                    <p class="text-red-500 flex justify-between">Coupon Discount: <span>-₹${product.couponDiscount}</span></p>
                                    <p class="text-text-light text-base font-semibold flex justify-between mt-2">Total: <span>₹${product.total}</span></p>
                                </div>
                            </div>
                        `;

                    }else{
                        html += `
                            <div class="bg-card-bg border border-border-color rounded-xl p-4 sm:p-6 flex flex-col" id="order-data" data-orderid="${product.orderId}">
                                <div class="flex flex-wrap justify-between items-start gap-2 mb-4">
                                    <div>
                                        <h3 class="text-lg md:text-xl font-semibold text-text-light">Order ID: ${product.orderId}</h3>
                                        <p class="text-sm text-text-medium mt-1"><span class="font-medium">Order Date:</span> ${new Date(product.createdAt).toLocaleDateString()}</p>
                                    </div>
                                    <span class="text-xs sm:text-sm font-semibold ${style} rounded-full px-3 py-1 capitalize">${product.status}</span>
                                </div>
                                
                                <div class="border-t border-border-color pt-4">
                                    <p class="text-base text-text-light mb-2 font-semibold">Items</p>
                                    <div class="space-y-2">${items}</div>
                                </div>
                                
                                <div class="border-t border-border-color mt-4 pt-4 space-y-2 text-sm">
                                    <p class="text-text-medium flex justify-between">Sub Total: <span>₹${product.subTotal}</span></p>
                                    <p class="text-text-medium flex justify-between">Delivery Charge: <span>₹${product.deliveryCharge}</span></p>
                                    <p class="text-red-500 flex justify-between">Discount: <span>-₹${product.discount + product.couponDiscount}</span></p>
                                    <p class="text-text-light text-base font-semibold flex justify-between mt-2">Total: <span>₹${product.total}</span></p>
                                </div>
                            </div>
                        `;
                    }
                });
                orderContainer.innerHTML = html;
                document.querySelectorAll('#order-data').forEach(element =>{
                    element.addEventListener('click', () => {
                        let orderId = element.dataset.orderid
                        window.location.href = `/orders/status?orderId=${orderId}`
                    })
                })
                

            };

        fetchAndRenderOrders(currentPage)

        const searchInput = document.getElementById("search-input")
        document.getElementById("search-btn").addEventListener("click", ()=>{
            let searchValue = searchInput.value.trim()
            if(!searchValue){
                searchInput.focus()
                searchInput.setAttribute('placeholder', "Please enter an id to search")
                return
            }
            fetchAndRenderOrders(currentPage, searchValue)
        })

        document.getElementById('clear-btn').addEventListener("click", ()=>{
            resetSearch(currentPage)
        })


        function resetSearch(page){
            searchInput.value = ''
            searchInput.setAttribute('placeholder', "Enter order ID")
            fetchAndRenderOrders(page)
        }

    })  
    </script>
