
    <!-- Use Tailwind CSS for responsive design and styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Use Inter font for a modern look -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
    <!-- Use Font Awesome for social media icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    <style>
        
        body {
            font-family: 'Inter', sans-serif;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }
        
        .gradient-button {
            background-image: linear-gradient(to right, #8B5CF6, #6366F1);
        }
    
        .background-effect {
            background-color: #18181C;
            background-image:
                linear-gradient(rgba(24, 24, 28, 0.8), rgba(24, 24, 28, 0.8)),
                url('/images/login-background.jpg');
            background-size: cover;
            background-position: center;
        }
    </style>


    <!-- Main container for the entire page content -->
    <div class="background-effect min-h-screen flex items-center justify-center p-4">
        <input type="text" id="message" value="{{message}}" placeholder="{{icon}}" hidden>
        <!-- Card for the reset password form -->
        <div class="bg-[#242428] p-8 rounded-2xl shadow-2xl max-w-sm w-full border border-[#404044]">

            <!-- Reset password form header -->
            <div class="text-center mb-6">
                <h1 class="text-xl font-semibold text-white">Enter new Password</h1>
            </div>

            <!-- Reset password form fields and buttons -->
            <form id="resetForm" class="space-y-4">

                <!-- New Password -->
                <div>
                    <input type="password" placeholder="New password" name="newPassword" id="newPass" 
                        class="bg-[#1E1E22] text-gray-300 border border-[#404044] rounded-lg p-3 w-full focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors duration-200" >
                    <p id="newPassError" class="text-red-500 text-sm mt-1 hidden"></p>
                </div>

                <!-- Confirm Password -->
                <div>
                    <input type="password" placeholder="Confirm password" name="confirmPassword" id="confirmPass" 
                        class="bg-[#1E1E22] text-gray-300 border border-[#404044] rounded-lg p-3 w-full focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors duration-200" >
                    <p id="confirmPassError" class="text-red-500 text-sm mt-1 hidden"></p>
                </div>

                <!-- Buttons -->
                <div class="flex items-center justify-between mt-4 space-x-2">
                    <a href="#" class="text-sm font-semibold text-indigo-400 hover:text-indigo-300 transition-colors duration-200">Back to Login</a>
                    <!-- Reset Button with Spinner -->
                        <button id="resetBtn" type="submit"
                            class="gradient-button text-white font-semibold py-2 px-6 rounded-lg shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 flex items-center justify-center space-x-2">
                            <span id="btnText">Reset Password</span>
                            <svg id="btnSpinner" class="animate-spin h-5 w-5 text-white hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor"
                                    d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z">
                                </path>
                            </svg>
                        </button>
                </div>
            </form>


        </div>

    </div>

    <!-- Footer section -->
    <footer class="bg-[#18181C] text-gray-400 p-8 border-t border-[#404044]">
        <div class="container mx-auto flex flex-col md:flex-row justify-between items-center md:items-start gap-8">

            <!-- Logo and Social Media -->
            <div class="flex flex-col items-center md:items-start text-center md:text-left mb-6 md:mb-0">
                <h2 class="text-2xl font-bold text-white mb-2">SonicBoom</h2>
                <div class="flex space-x-4 text-gray-400">
                    <a href="#" class="hover:text-white transition-colors duration-200"><i class="fab fa-twitter"></i></a>
                    <a href="#" class="hover:text-white transition-colors duration-200"><i class="fab fa-instagram"></i></a>
                    <a href="#" class="hover:text-white transition-colors duration-200"><i class="fab fa-linkedin-in"></i></a>
                </div>
            </div>

            <!-- Footer links container -->
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-8 text-center md:text-left">
                <!-- Support links -->
                <div>
                    <h3 class="font-semibold text-white mb-3">Support</h3>
                    <ul class="space-y-2 text-sm">
                        <li><address>Kochi, Eranamkulam,<br>873302, Kerala</address></li>
                        <li><a href="mailto:sonicboom@gmail.com" class="hover:text-white transition-colors duration-200">sonicboom@gmail.com</a></li>
                        <li><a href="tel:+916744245234" class="hover:text-white transition-colors duration-200">+91 6744245234</a></li>
                    </ul>
                </div>

                <!-- Account links -->
                <div>
                    <h3 class="font-semibold text-white mb-3">Account</h3>
                    <ul class="space-y-2 text-sm">
                        <li><a href="#" class="hover:text-white transition-colors duration-200">My Account</a></li>
                        <li><a href="#" class="hover:text-white transition-colors duration-200">Login / Register</a></li>
                        <li><a href="#" class="hover:text-white transition-colors duration-200">Cart</a></li>
                        <li><a href="#" class="hover:text-white transition-colors duration-200">Wishlist</a></li>
                        <li><a href="#" class="hover:text-white transition-colors duration-200">Shop</a></li>
                    </ul>
                </div>

                <!-- Quick links -->
                <div>
                    <h3 class="font-semibold text-white mb-3">Quick links</h3>
                    <ul class="space-y-2 text-sm">
                        <li><a href="#" class="hover:text-white transition-colors duration-200">Privacy Policy</a></li>
                        <li><a href="#" class="hover:text-white transition-colors duration-200">Terms of use</a></li>
                        <li><a href="#" class="hover:text-white transition-colors duration-200">FAQ</a></li>
                        <li><a href="#" class="hover:text-white transition-colors duration-200">Contact</a></li>
                        <li><a href="#" class="hover:text-white transition-colors duration-200">Developers</a></li>
                    </ul>
                </div>
            </div>

        </div>
    </footer>

<script>
        document.getElementById('resetForm').addEventListener('submit', async (e) => {
        e.preventDefault();

        const newPass = document.getElementById('newPass');
        const confirmPass = document.getElementById('confirmPass');
        const newPassError = document.getElementById('newPassError');
        const confirmPassError = document.getElementById('confirmPassError');
        const resetBtn = document.getElementById('resetBtn');
        const btnText = document.getElementById('btnText');
        const btnSpinner = document.getElementById('btnSpinner');

        let isValid = true;

        // Reset errors
        [newPass, confirmPass].forEach(input => input.classList.remove('border-red-500'));
        [newPassError, confirmPassError].forEach(err => {
            err.classList.add('hidden');
            err.textContent = '';
        });

        // Validation
        if (newPass.value.trim().length < 6) {
            newPass.classList.add('border-red-500');
            newPassError.textContent = "New password must be at least 6 characters.";
            newPassError.classList.remove('hidden');
            isValid = false;
        }
        if (newPass.value !== confirmPass.value) {
            confirmPass.classList.add('border-red-500');
            confirmPassError.textContent = "Passwords do not match.";
            confirmPassError.classList.remove('hidden');
            isValid = false;
        }

        if (!isValid) return;

        // Show loading
        resetBtn.disabled = true;
        btnText.textContent = "Processing...";
        btnSpinner.classList.remove('hidden');

        try {
            const res = await fetch(`/forgot_password/reset`, {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    newPassword: newPass.value,
                    confirmPassword: confirmPass.value
                })
            });

            const data = await res.json();

            // Handle success / error
            if (res.ok) {
                window.location.href = "/login";
            } else {
                confirmPassError.textContent = data.message || "Something went wrong.";
                confirmPassError.classList.remove('hidden');
                confirmPass.classList.add('border-red-500');
            }

        } catch (err) {
            console.error(err);
            confirmPassError.textContent = "Network error. Please try again.";
            confirmPassError.classList.remove('hidden');
            confirmPass.classList.add('border-red-500');
        } finally {
            // Hide loading
            resetBtn.disabled = false;
            btnText.textContent = "Reset Password";
            btnSpinner.classList.add('hidden');
        }
    });



    let msgValue = document.getElementById('message').value
    let icon = document.getElementById('message').getAttribute('placeholder')
    if(msgValue) {
        Swal.fire({
            title: msgValue,
            icon: icon,
            background: "#242428",
            color: 'white',
            customClass: {
                popup: 'my-swal-border'
            }
        });
    }
</script>