<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<style>
    .breadcrumb {
        display: flex;
        gap: 4px;
    }

    .icon {
        padding-top: .7%;
    }

    .my-swal-border {
        border: 1px solid #404044 !important;
        /* Change color and thickness */
        border-radius: 15px !important;
    }
</style>

<input type="text" id="focusIndicator" value="account" hidden>

<!-- Content Area -->
<div class="flex-1 flex flex-col gap-8">

    <input type="text" value="{{user.name}}" hidden>

    <!-- Account Details Card -->
    <section class="bg-card-bg border border-border-color rounded-xl p-6 md:p-8">
        <div class="breadcrumb">
            <a href="/account">
                <h2 class="text-2xl font-bold mb-6">Account</h2>
            </a>
            <span class="material-symbols-outlined icon">
                arrow_forward_ios
            </span>
            <h2 class="text-2xl font-bold mb-6">Edit Account</h2>
        </div>
        {{#if user}}
        <input type="text" value="{{user._id}}" id="userId" hidden>
        <div class="flex flex-col md:flex-row gap-8">
            <form class="w-full md:w-3/5 space-y-4">
                <div>
                    <label for="first-name" class="block text-sm font-medium text-text-medium mb-2">Name</label>
                    <input type="text" id="first-name"
                        class="w-full bg-input-bg border border-border-color rounded-lg p-3 focus:ring-2 focus:ring-primary-blue focus:border-primary-blue outline-none"
                        value="{{user.name}}">
                </div>
                <div>
                    <label for="phone" class="block text-sm font-medium text-text-medium mb-2">Phone</label>
                    <input type="tel" id="phone"
                        class="w-full bg-input-bg border border-border-color rounded-lg p-3 focus:ring-2 focus:ring-primary-blue focus:border-primary-blue outline-none"
                        value="{{user.mobile}}">
                </div>
                <div>
                    <label for="email" class="block text-sm font-medium text-text-medium mb-2">Email</label>
                    <input type="email" id="email"
                        class="w-full bg-input-bg border border-border-color rounded-lg p-3 focus:ring-2 focus:ring-primary-blue focus:border-primary-blue outline-none"
                        value="{{user.email}}" {{#if user.googleId}}readonly{{/if}}>
                </div>
                <div>
                    <input type="password" id="current-password"
                        class="w-full bg-input-bg border border-border-color rounded-lg p-3 focus:ring-2 focus:ring-primary-blue focus:border-primary-blue outline-none hidden mt-4 text-white"
                        placeholder="Enter your current password">
                </div>
                <button type="submit"
                    class="bg-primary-blue hover:bg-primary-blue-hover text-white font-semibold py-3 px-6 rounded-lg transition-colors">Save
                    changes</button>
            </form>
            <div class="w-full md:w-2/5 flex flex-col items-center gap-4">
                <img id="profile-picture-preview" src="{{user.profilePhoto}}" alt="Profile Picture"
                    class="w-32 h-32 rounded-full object-cover border-2 border-border-color">
                <input type="file" id="image-upload" accept="image/*" class="hidden">
                <button id="change-photo-btn"
                    class="bg-input-bg hover:bg-border-color text-text-light font-semibold py-2 px-4 rounded-lg transition-colors">Change
                    Photo</button>
            </div>
            {{/if}}

            <div id="crop-modal"
                class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 hidden">
                <div class="bg-card-bg p-6 rounded-lg max-w-lg w-full">
                    <h3 class="text-xl font-bold mb-4">Crop Image</h3>
                    <div class="w-full h-80 overflow-hidden mb-4">
                        <img id="image-to-crop" class="max-w-full block">
                    </div>
                    <div class="flex justify-end gap-4">
                        <button id="cancel-crop-btn"
                            class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded">Cancel</button>
                        <button id="upload-crop-btn"
                            class="bg-primary-blue hover:bg-primary-blue-hover text-white font-bold py-2 px-4 rounded">Upload</button>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Reset Password Card -->
    <section class="bg-card-bg border border-border-color rounded-xl p-6 md:p-8">
        <h2 class="text-2xl font-bold mb-6">Password</h2>
        <div class="space-y-4">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <input type="password"
                    class="bg-input-bg border border-border-color rounded-lg p-3 focus:ring-2 focus:ring-primary-blue focus:border-primary-blue outline-none "
                    value="fakepassword@123" placeholder="Current password" readonly>
            </div>
            <button type="submit" id="reset-password"
                class="bg-primary-blue hover:bg-primary-blue-hover text-white font-semibold py-3 px-6 rounded-lg transition-colors">Reset
                Password</button>
        </div>
    </section>

</div>

<div id="otp-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 hidden">
    <div class="bg-card-bg p-6 rounded-lg max-w-sm w-full border border-border-color">
        <h3 class="text-xl font-bold mb-4 text-white">Verify Email Change</h3>
        <p class="mb-4 text-sm text-text-medium">A one-time password (OTP) has been sent to your new email address:
            <span id="new-email-display" class="font-bold text-white"></span></p>
        <form id="otp-form" class="space-y-4">
            <div>
                <label for="otp-code" class="block text-sm font-medium text-text-medium mb-2">Enter OTP</label>
                <input type="text" id="otp-code"
                    class="w-full bg-input-bg border border-border-color rounded-lg p-3 focus:ring-2 focus:ring-primary-blue focus:border-primary-blue outline-none text-white"
                    placeholder="******" maxlength="6">
            </div>
            <div class="flex justify-end gap-4">
                <button type="button" id="cancel-otp-btn"
                    class="bg-gray-700 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded transition-colors">Cancel</button>
                <button type="submit" id="verify-otp-btn"
                    class="bg-primary-blue hover:bg-primary-blue-hover text-white font-bold py-2 px-4 rounded transition-colors">Verify</button>
            </div>
        </form>
    </div>
</div>

<script>
    document.getElementById('change-photo-btn').addEventListener('click', () => {
        document.getElementById('image-upload').click();
    });

    document.getElementById('reset-password').addEventListener("click", () => {
        Swal.fire({
            title: "Are you sure?",
            text: "Do you want to Reset your Password",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#4B4DFF",
            cancelButtonColor: "#d33",
            confirmButtonText: "Yes",
            cancelButtonText: "No",
            background: "#242428",
            customClass: {
                popup: 'my-swal-border'
            }
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = '/forgot_password'
            }

        });
    })


    const imageUpload = document.getElementById('image-upload');
    const cropModal = document.getElementById('crop-modal');
    const imageToCrop = document.getElementById('image-to-crop');
    const profilePicturePreview = document.getElementById('profile-picture-preview');
    const uploadCropBtn = document.getElementById('upload-crop-btn');
    const cancelCropBtn = document.getElementById('cancel-crop-btn');

    let cropper;


    imageUpload.addEventListener('change', (e) => {
        const files = e.target.files;
        if (files && files.length > 0) {
            const file = files[0];
            const reader = new FileReader();
            reader.onload = (event) => {
                imageToCrop.src = event.target.result;
                cropModal.classList.remove('hidden');
                if (cropper) {
                    cropper.destroy();
                }
                cropper = new Cropper(imageToCrop, {
                    aspectRatio: 1,
                    viewMode: 1,
                });
            };
            reader.readAsDataURL(file);
        }
    });


    cancelCropBtn.addEventListener('click', () => {
        // 1. Hide the modal
        cropModal.classList.add('hidden');

        // 2. Destroy the cropper instance to clean up
        if (cropper) {
            cropper.destroy();
        }

        // 3. Reset the file input (optional but good practice)
        imageUpload.value = '';
    });

    uploadCropBtn.addEventListener('click', () => {
        cropper.getCroppedCanvas({
            width: 256,
            height: 256,
        }).toBlob((blob) => {
            const formData = new FormData();
            const id = document.getElementById('userId').value.trim()
            formData.append('profile-image', blob, 'profile-photo.png');

            fetch(`/account/profilephoto?_id=${id}`, {
                method: 'POST',
                body: formData,
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Server responded with status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(serverData => {
                    profilePicturePreview.src = serverData.profilePhoto;
                    Swal.fire({
                        title: 'Success',
                        text: 'Profile picture updated successfully!',
                        icon: 'success',
                        background: "#242428",
                        color: 'white',
                        customClass: {
                            popup: 'my-swal-border'
                        }
                    });
                    cropModal.classList.add('hidden');
                    document.getElementById('profile').src = serverData.profilePhoto
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        title: 'Oops',
                        text: 'An error occurred during the update process.',
                        icon: 'warning',
                        background: "#242428",
                        color: 'white',
                        customClass: {
                            popup: 'my-swal-border'
                        }
                    });
                    cropModal.classList.add('hidden');
                });
        }, 'image/png');
    });



    const saveChangesBtn = document.querySelector('form button[type="submit"]');
    const otpModal = document.getElementById('otp-modal');
    const otpForm = document.getElementById('otp-form');
    const newEmailInput = document.getElementById('email');
    const newEmailDisplay = document.getElementById('new-email-display');
    const otpCodeInput = document.getElementById('otp-code');
    const cancelOtpBtn = document.getElementById('cancel-otp-btn');
    const userId = document.getElementById('userId').value.trim();


    const originalEmail = newEmailInput.value;


    saveChangesBtn.addEventListener('click', (e) => {
        e.preventDefault();

        const updatedEmail = newEmailInput.value;
        const isEmailChanged = updatedEmail !== originalEmail;
        const updatedName = document.getElementById('first-name').value;
        const updatedPhone = document.getElementById('phone').value;
        const isOtherDataChanged = updatedName !== '{{user.name}}' || updatedPhone !== '{{user.mobile}}';
        const passwordInput = document.getElementById('current-password');

        if (isEmailChanged) {
            // Show the password input field
            passwordInput.classList.remove('hidden');

            // Check if the user has entered a password
            if (passwordInput.value.trim() === '') {
                Swal.fire({
                    title: 'Password Required',
                    text: 'Please enter your current password to change your email.',
                    icon: 'warning',
                    background: "#242428",
                    color: 'white',
                    customClass: {
                        popup: 'my-swal-border'
                    }
                });
                return; // Stop the function here
            }

            // Validate the password on the server-side
            fetch('/verify-password', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ userId: userId, password: passwordInput.value }),
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Password is correct, now proceed with the OTP verification process
                        newEmailDisplay.textContent = updatedEmail;
                        otpModal.classList.remove('hidden');
                        passwordInput.value = ''; // Clear the password field

                        // Send the OTP
                        fetch('/send-otp', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ newEmail: updatedEmail, userId: userId }),
                        })
                            .then(response => response.json())
                            .then(otpData => {
                                if (otpData.success) {
                                    Swal.fire({
                                        title: 'OTP Sent!',
                                        text: 'A one-time password has been sent to your new email.',
                                        icon: 'success',
                                        background: "#242428",
                                        color: 'white',
                                        customClass: {
                                            popup: 'my-swal-border'
                                        }
                                    });
                                } else {
                                    Swal.fire({
                                        title: 'Failed to Send OTP',
                                        text: 'Please try again.',
                                        icon: 'error',
                                        background: "#242428",
                                        color: 'white',
                                        customClass: {
                                            popup: 'my-swal-border'
                                        }
                                    });
                                }
                            });
                    } else {
                        Swal.fire({
                            title: 'Incorrect Password',
                            text: 'The password you entered is incorrect.',
                            icon: 'error',
                            background: "#242428",
                            color: 'white',
                            customClass: {
                                popup: 'my-swal-border'
                            }
                        });
                    }
                })
                .catch(error => {
                    Swal.fire({
                        title: 'Error',
                        text: 'An error occurred while verifying the password.',
                        icon: 'error',
                        background: "#242428",
                        color: 'white',
                        customClass: {
                            popup: 'my-swal-border'
                        }
                    });
                    console.error('Password verification error:', error);
                });
        } else if (isOtherDataChanged) {
            // If only other data is changed, save without password verification
            saveProfileChanges(updatedName, updatedPhone);
        } else {
            Swal.fire({
                title: 'No Changes',
                text: 'You have not made any changes to save.',
                icon: 'info',
                background: "#242428",
                color: 'white',
                customClass: {
                    popup: 'my-swal-border'
                }
            });
        }
    });


    otpForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const otpCode = otpCodeInput.value.trim();
        const updatedEmail = newEmailInput.value;

        if (otpCode.length === 6) {
            fetch('/verify-otp', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ otp: otpCode, userId: userId, newEmail: updatedEmail }),
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        saveProfileChanges(null, null, updatedEmail)
                        Swal.fire({
                            title: 'Verification Successful!',
                            text: 'Your email has been updated.',
                            icon: 'success',
                            background: "#242428",
                            color: 'white',
                            customClass: {
                                popup: 'my-swal-border'
                            }
                        }).then(() => {
                            otpModal.classList.add('hidden');
                            originalEmail = updatedEmail;
                            setTimeout(() => {
                                window.location.reload()
                            }, 3000)
                        });
                    } else {
                        Swal.fire({
                            title: 'Invalid OTP',
                            text: 'The code you entered is incorrect. Please try again.',
                            icon: 'error',
                            background: "#242428",
                            color: 'white',
                            customClass: {
                                popup: 'my-swal-border'
                            }
                        });
                    }
                })
                .catch(error => {
                    Swal.fire({
                        title: 'Error',
                        text: 'An error occurred during verification. Please try again.',
                        icon: 'error',
                        background: "#242428",
                        color: 'white',
                        customClass: {
                            popup: 'my-swal-border'
                        }
                    });
                    console.error('Network error:', error);
                });
        } else {
            Swal.fire({
                title: 'Invalid Input',
                text: 'Please enter a 6-digit OTP.',
                icon: 'warning',
                background: "#242428",
                color: 'white',
                customClass: {
                    popup: 'my-swal-border'
                }
            });
        }
    });

    cancelOtpBtn.addEventListener('click', () => {
        otpModal.classList.add('hidden');
        otpCodeInput.value = '';
    });

    function saveProfileChanges(name, phone) {
        let updateValue = {}
        if (name) {
            updateValue.name = name
        }
        if (phone) {
            updateValue.mobile = phone
        }

        console.log(updateValue)
        fetch(`/account/update?_id=${userId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(updateValue),
        })
            .then(async response => {
                const res = await response.json()
                if (!response.ok) {
                    throw new Error(res.message || 'Failed to update profile.');
                }
                return res;
            })
            .then(data => {
                Swal.fire({
                    title: "Success",
                    text: "Profile updated successfully",
                    icon: "success",
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Done",
                    background: "#242428",
                    customClass: {
                        popup: 'my-swal-border'
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.reload()
                    }
                })

            })
            .catch(error => {
                console.error('Error updating profile:', error);
                Swal.fire({
                    title: 'Error',
                    text: error.message,
                    icon: 'warning',
                    background: "#242428",
                    color: 'white',
                    customClass: {
                        popup: 'my-swal-border'
                    }
                });
            });
    }



</script>