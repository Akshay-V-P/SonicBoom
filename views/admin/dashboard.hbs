<link rel="stylesheet" href="/css/dashboard.css">
<input type="text" id="pageName" value="dashboard" hidden>
<div class="header">
  <h1 class="account-details">Account Details</h1>
</div>

<div class="stats-grid">
  <div class="stat-card">
    <div class="stat-value" id="revenue-count">â‚¹ 5,55,000</div>
    <div class="stat-label">Revenue</div>
  </div>
  <div class="stat-card">
    <div class="stat-value" id="products-count">2,50</div>
    <div class="stat-label">Products</div>
  </div>
  <div class="stat-card">
    <div class="stat-value" id="customer-count">1,500</div>
    <div class="stat-label">Customers</div>
  </div>
  <div class="stat-card">
    <div class="stat-value" id="order-count">1,013</div>
    <div class="stat-label">Orders</div>
  </div>
</div>

<div style="max-width: 900px; margin: auto; padding: 20px;">
  <h2 style="text-align:center; margin-bottom:20px;">Sales Chart</h2>

  <select id="filter" style="padding:8px 12px; border-radius:6px; margin-bottom:20px; color:white;" class="stat-card">
    <option value="daily" selected>Daily</option>
    <option value="weekly">Weekly</option>
    <option value="monthly">Monthly</option>
    <option value="yearly">Yearly</option>
  </select>

  <!-- ðŸ‘‡ wrap canvas inside fixed-height container -->
  <div style="height: 400px;">
    <canvas id="salesChart"></canvas>
  </div>
</div>

<div class="orders-section">
  <div class="orders-header">
    <h3 class="orders-title">Top selling Product</h3>
  </div>

  <table class="orders-table" id="ordersTable">
    <thead class="table-header">
      <tr>
        <th>Product</th>
        <th>Total Quantity</th>
        <th>Total Revenue</th>
      </tr>
    </thead>
    <tbody id="ordersTableBody">
      <!-- Table rows will be dynamically populated -->
    </tbody>
  </table>

  <div class="pagination">
    
  </div>
</div>


<div class="orders-section" style="margin-top: 40px;">
  <div class="orders-header">
    <h3 class="orders-title">Top selling Category</h3>
  </div>

  <table class="orders-table" id="ordersTable">
    <thead class="table-header">
      <tr>
        <th>Category</th>
        <th>Total Revenue</th>
      </tr>
    </thead>
    <tbody id="categoryTableBody">
      <!-- Table rows will be dynamically populated -->
    </tbody>
  </table>

  <div class="pagination">
    
  </div>
</div>



<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
  const ctx = document.getElementById('salesChart').getContext('2d');
  let chart;

  async function renderChart(filter) {
    try{

      let revenueCount = document.getElementById("revenue-count")
      let productCount = document.getElementById("products-count")
      let orderCount = document.getElementById("order-count")
      let customerCount = document.getElementById("customer-count")

      let topProductBody = document.getElementById("ordersTableBody")
      topProductBody.innerHTML = ""
      let topCategoryBody = document.getElementById("categoryTableBody")
      topCategoryBody.innerHTML = ""


      const response = await fetch(`/admin/api/sales-chart?filter=${filter}`)
      const data = await response.json()
      if (!response.ok) throw new Error(data.message || "Check your internet")
      

      const labels = data.salesData.map(item => {
        if (item._id.hour) return `${item._id.hour}`;
        if (item._id.week) return `Week ${item._id.week}, ${item._id.year}`;
        if (item._id.month) return `${item._id.month}-${item._id.year}`;
        return `${item._id.year}`;
      });


      const revenue = data.salesData.map(item => item.totalRevenue);
      const orders = data.salesData.map(item => item.totalOrders);

      //Dashboard data update
      console.log(data.salesDashboardData)
      revenueCount.innerText = `â‚¹${data.salesDashboardData.totalValue}`
      orderCount.innerText = data.salesDashboardData.orderCount
      customerCount.innerText = data.salesDashboardData.customerCount[0]?.customerCount || 0
      productCount.innerText = data.salesDashboardData.productCount[0]?.productCount || 0

      if (chart) chart.destroy();

      chart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels,
          datasets: [
            {
              label: 'Revenue (â‚¹)',
              data: revenue,
              backgroundColor: 'rgba(54, 162, 235, 0.7)',
              borderColor: 'rgba(54, 162, 235, 1)',
              borderWidth: 2,
              borderRadius: 6
            },
            {
              label: 'Orders',
              data: orders,
              backgroundColor: 'rgba(75, 192, 192, 0.7)',
              borderColor: 'rgba(75, 192, 192, 1)',
              borderWidth: 2,
              borderRadius: 6
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false, 
          plugins: {
            legend: { position: 'top' },
            title: { display: true, text: `Sales Report (${filter})` }
          },
          scales: {
            y: { beginAtZero: true }
          }
        }
      });


      if(data.topSellingProduct.length > 0){
        data.topSellingProduct.forEach(product =>{
          const row = document.createElement('tr');
          row.className = 'table-row';
          row.innerHTML = `
            <td data-label="Product">${product.productName}</td>
            <td data-label="quantity">${product.totalQuantity}</td>
            <td data-label="Total">${product.totalRevenue}</td>
            `;

          topProductBody.appendChild(row)
        })
      }

      if(data.topSellingCategory.length > 0){
        data.topSellingCategory.forEach(category =>{
          const row = document.createElement('tr');
          row.className = 'table-row';
          row.innerHTML = `
            <td data-label="Product">${category.categoryName}</td>
            <td data-label="quantity">${category.totalRevenue}</td>
            `;

          topCategoryBody.appendChild(row)
        })
      }


    }catch (err){
      console.log(err)
      Swal.fire({
          title: "Something went wrong",
          icon: "warning",
          background: "#242428",
          color: 'white',
          customClass: {
            popup: 'my-swal-border'
          }
      });

      if (chart) chart.destroy();

      chart = new Chart(ctx, {
        type: 'line',
        data: { labels: [], datasets: [] },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            title: { display: true, text: "Error loading sales data" }
          }
        }
      });
    }
  }

  renderChart("daily");

  document.getElementById("filter").addEventListener("change", (e) => {
    renderChart(e.target.value);
  });
</script>