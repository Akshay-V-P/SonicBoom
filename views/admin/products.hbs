
    <style>
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }

        .account-btn {
            background-color: #333;
            color: #fff;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 14px;
            cursor: pointer;
        }

        .page-title {
            font-size: 24px;
            font-weight: 600;
        }

        .products-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 15px;
        }

        .products-actions {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            align-items: center;
        }

        .add-product-btn {
            background-color: #4a90e2;
            color: #fff;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 14px;
            cursor: pointer;
        }

        .refresh-btn {
            background-color: #4a90e2;
            color: #fff;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 14px;
            cursor: pointer;
        }

        .sort-filter {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .sort-filter label {
            font-size: 14px;
            color: #999;
        }

        .sort-filter select {
            padding: 8px;
            border: 1px solid #333;
            border-radius: 6px;
            background-color: #1a1a1a;
            color: #fff;
            font-size: 14px;
        }

        .product-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 380px));
            gap: 30px;
        }

        .product-card {
            background-color: #1a1a1a;
            border: 1px solid #333;
            border-radius: 8px;
            overflow: hidden;
            display: flex;
            flex-direction: column;
            position: relative;
        }

        .product-card .edit-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: rgba(74, 144, 226, 0.8);
            color: #fff;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            font-size: 12px;
            cursor: pointer;
            z-index: 10;
        }

        .product-image-container {
            padding:12px;
            overflow: hidden;
            display: flex;
        }

        .product-image {
            aspect-ratio: 3/4;
            width: 150px;
            height: 100%;
            object-fit: cover;
            border-radius: 6px;
        }

        .product-info {
            padding: 0 15px 15px;
            display: flex;
            flex-direction: column;
            flex-grow: 1;
        }

        .product-info .category {
            background-color: #4a90e2;
            color: #fff;
            font-size: 10px;
            padding: 4px 8px;
            border-radius: 2px;
            align-self: flex-start;
            margin-bottom: 10px;
        }

        .product-info .product-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 5px;
        }

        .product-info .product-stock {
            color: #999;
            font-size: 12px;
            margin-bottom: 10px;
        }

        .product-info .price-old {
            font-size: 14px;
            color: #666;
            text-decoration: line-through;
        }

        .product-info .price-new {
            font-size: 16px;
            font-weight: bold;
            color: #ffffff;
            margin-bottom: 10px;
        }

        .product-info .description {
            font-size: 12px;
            color: #999;
            line-height: 1.5;
            margin-bottom: 15px;
            flex-grow: 1;
        }

        .product-info .unlist-btn {
            color: #fff;
            border: none;
            padding: 10px;
            border-radius: 6px;
            font-size: 14px;
            cursor: pointer;
        }

        .product-info .updatestock-btn {
            background-color: #4a90e2;
            color: #fff;
            border: none;
            padding: 10px;
            border-radius: 6px;
            font-size: 14px;
            cursor: pointer;
        }

        .product-info .updatestock-btn:hover {
            background-color: #6ab7ff;
        }

        #nothingToShow{
            position: absolute;
            width:280px;
            left: calc(50% - 140px);
            top: 40%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 20px;
        }

        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 30px;
            gap: 8px;
        }

        .page-btn {
            background: #333;
            color: #fff;
            padding: 8px 14px;
            border-radius: 6px;
            text-decoration: none;
        }

        .page-btn.active {
            background: #4a90e2;
            font-weight: bold;
        }

        .stock-details{
            color: #a8a8a8;
        }

        /* Search Section Styles */
        .search {
            display: flex;
            align-items: center;
            gap: 10px;

        }

        .search input[type="text"] {
            background-color: #1a1a1a;
            border: 1px solid #333;
            padding: 8px 14px;
            border-radius: 6px;
            color: #fff;
            font-size: 14px;
            width: 250px;
            transition: border-color 0.5s, box-shadow 0.5s;
        }

        .search input[type="text"]:focus {
            outline: none;
            border-color: #4a90e2;
            box-shadow: 0 0 4px rgba(74, 144, 226, 0.5);
        }

        .search a {
            background-color: #4a90e2;
            color: white;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 14px;
            text-decoration: none;
            transition: background-color 0.2s;
        }

        .search a:hover {
            background-color: #6ab7ff;
        }

        #clearBtn{
            background-color: #333;
            color: white;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 14px;
            text-decoration: none;
            cursor: pointer;
            transition: background-color 0.2s;
            border:  none;
        }

        #btn-div{
            display: flex;
            justify-content: space-between;
        }

        /* --- Add these styles for the suggestion bar --- */

        /* Make the search container a positioning context */
        .search {
            position: relative; /* This is crucial for positioning the suggestions */
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .suggestions-list {
            display: none; /* Hidden by default */
            position: absolute;
            top: 100%; /* Position it right below the search input */
            left: 0;
            width: 100%; /* Make it the same width as the search container */
            background-color: #1a1a1a;
            border: 1px solid #333;
            border-top: none; /* Avoid double border with the input */
            border-radius: 0 0 6px 6px;
            z-index: 1000; /* Ensure it appears above other content */
            max-height: 250px; /* Limit height and allow scrolling */
            overflow-y: auto;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        .suggestion-item {
            padding: 10px 14px;
            color: #fff;
            cursor: pointer;
            font-size: 14px;
            border-bottom: 1px solid #333;
        }

        .suggestion-item:last-child {
            border-bottom: none; /* Remove border from the last item */
        }

        .suggestion-item:hover {
            background-color: #4a90e2; /* Highlight on hover */
        }

        .suggestions-list.active {
            display: block; /* Show the list when it has the 'active' class */
        }

        .active{
            background-color: rgb(9, 160, 9);
        }

        .unlisted{
            background-color: #e24a4a;
        }

        .my-swal-border {
            border: 1px solid #404044 !important;
            border-radius: 15px !important;
        }

        @media (max-width: 768px) {
            .header {
                flex-direction: column;
                gap: 15px;
                align-items: stretch;
            }

            .products-header {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .products-actions, .sort-filter {
                width: 100%;
                justify-content: space-between;
            }

        }

       
    </style>
    <input type="text" id="pageName" value="products" hidden>
            <div class="header">
                <h1 class="page-title">Products</h1>
            </div>

            <div class="products-header">
                <div class="products-actions">
                    <a href="/admin/products/add"><button class="add-product-btn">Add Product</button></a>
                    <div class="search">
                        <input type="text" id="searchInput" placeholder="Search users...">
                        <a href="#" id="searchBtn">Search</a>
                        <button id="clearBtn">Clear</button>

                        <div id="suggestions-box" class="suggestions-list"></div>
                    </div>
                </div>
                <div class="sort-filter">
                    <label for="filter-by">Filter</label>
                    <select name="filter-by" id="filter-by">
                        <option value="" disabled selected>Categorys</option>
                        {{#each categorys}}
                        <option value="{{this._id}}">{{this.name}}</option>
                        {{/each}}
                    </select>
                    <label for="sort-by">Sort</label>
                    <select name="sort-by" id="sort-by">
                        <option value="createdAt">Date Added</option>
                        <option value="offerPrice">Price</option>
                        <option value="stock">Stock</option>
                    </select>
                    <select name="sort-order" id="sort-order">
                        <option value="-1">Descending</option>
                        <option value="1">Ascending</option>
                    </select>
                    <button class="refresh-btn" id="applyfilters">Apply</button>
                </div>
            </div>

            <div class="product-grid">
                {{!-- {{#if products}}
                    {{#each products}}
                        <div class="product-card">
                            <a href="/admin/products/${product._id}/edit"><button class="edit-btn">Edit</button></a>
                            <div class="product-image-container">
                                <img src="${product.thumbnail}$" class="product-image">
                                <div style="margin-left: 12px; margin-top:6px">
                                    <h3 class="product-title" style="margin-bottom: 12px;">Stocks</h3>
                                    <p class="product-stock stock-details">Base Game - ${product.stock} Nos</p>

                                    {{#if products.varients}}{{#each products.varients}}<p class="product-stock stock-details">Edition - {{product.stock}} Nos</p>{{/each}}{{/if}}

                                    <h3 class="product-title" style="margin-top: 12px; margin-bottom: 12px;">Prices</h3>
                                    <p>
                                        <span class="price-old stock-details">Base Game - </span>
                                        <span class="price-new stock-details">₹${product.offerPrice}$</span>
                                    </p>
                                    <p>
                                        <span class="price-old stock-details">Edition - </span>
                                        <span class="price-new stock-details">₹${product.offerPrice}</span>
                                    </p>
                                </div>
                                
                            </div>
                            <div class="product-info">
                                <span class="category">${product.categoryId.name}</span>
                                <h3 class="product-title">${product.name}</h3>
                                <p class="description">${product.description}</p>
                                <div id="btn-div">
                                    <button class="unlist-btn">Unlist</button>
                                    <button class="updatestock-btn">Update Stock</button>
                                </div>
                            </div>
                        </div>
                    {{/each}}
                {{else}}
                    <div id="nothingToShow">
                        <h2>Nothing to show here</h2>
                        <p style="color: #666;">You can add a product</p>
                        <a href="/admin/products/add"><button class="add-product-btn">Add Product</button></a>
                    </div>
                {{/if}} --}}
                
            </div>

            <div class="pagination pagination-container">
                
            </div>

<script>
    console.log(window.location.origin)
    document.addEventListener('DOMContentLoaded', () => {
        const url = `/admin/products/show?sort=createdAt:-1&currentPage=1&limit=9`
        fetchProducts(url)
        const searchInput = document.getElementById('searchInput');
        const searchBtn = document.getElementById('searchBtn');
        const clearBtn = document.getElementById('clearBtn')
        const filter = document.getElementById('filter-by')
        const sort = document.getElementById('sort-by')
        const sortOrder = document.getElementById('sort-order')

        searchBtn.addEventListener('click', ()=>{
            const searchValue = searchInput.value.trim()
            if (!searchValue) {
                const input = document.getElementById("searchInput");
                input.style.borderColor = "#e24a4a";
                input.style.boxShadow = "0 0 4px rgba(226, 74, 74, 0.5)";

                setTimeout(() => {
                    input.style.borderColor = "#333";
                    input.style.boxShadow = "none";
                }, 1500);

                return;
            }
            fetchProducts(`/admin/products/show?search=${encodeURIComponent(searchValue)}&currentPage=1&limit=9`)
        })


        clearBtn.addEventListener('click', ()=>{
            searchInput.value = ""
            filter.selectedIndex = 0
            sort.selectedIndex = 0
            fetchProducts(`/admin/products/show?sort=createdAt:-1&currentPage=1&limit=9`)
        })


        document.getElementById('applyfilters').addEventListener('click', ()=>{
            fetchProducts(searchUrl())
        })



    })

    function searchUrl(){
        const search = document.getElementById('searchInput').value.trim()
        const filter = document.getElementById('filter-by').value.trim()
        const sort = document.getElementById('sort-by').value.trim()
        const sortOrder = document.getElementById('sort-order').value.trim()



        let url = `/admin/products/show?`
        if(search){
            url += `search=${encodeURIComponent(search)}&`
        }
        if(filter){
            url += `filter=${filter}&`
        }
        if(sort){
            url += `sort=${sort}:${sortOrder}`
        }
        
        const currentPage = localStorage.getItem('productsCurrentPage')
        url += `currentPage=${currentPage}&limit=9`
        return url
    }


    function fetchProducts(url){
        fetch(url)
            .then(res => {
                if(!res.ok) throw new Error("Failed to fetch")
                return res.json()
            })
            .then(data => {
                const productGrid = document.querySelector(".product-grid")
                productGrid.innerHTML = ""
                console.log(data)
                if(data.result.length == 0){
                    productGrid.innerHTML = `<p style="text-align:center;color:#999;">No Products found</p>`
                    return
                }
                let index = 0
                let html = ''
                data.result.forEach((product)=>{
                    const variantStock = product.variants.map((variant, index) =>  {
                        if(index === 0) return ""
                        return `<p class="product-stock stock-details">Edition - ${variant.stock} Nos</p>`
                    }
                    ).join("")

                    const variantPrice = product.variants.map((variant, index)=>{
                        if(index === 0) return ""
                        return `<span class="price-old stock-details">Edition - </span><span class="price-new stock-details">₹${variant.offerPrice}</span>`
                    }).join("")
                    html += `
                            <div class="product-card">
                                <a href="/admin/products/${product._id}/edit"><button class="edit-btn">Edit</button></a>
                                <div class="product-image-container">
                                    <img src="${product.variants[0].thumbnail}" class="product-image">
                                    <div style="margin-left: 12px; margin-top:6px">
                                        <h3 class="product-title" style="margin-bottom: 12px;">Stocks</h3>
                                        <p class="product-stock stock-details">Base Game - ${product.variants[0].stock} Nos</p>
                                        
                                        ${variantStock}

                                        <h3 class="product-title" style="margin-top: 12px; margin-bottom: 12px;">Prices</h3>
                                        <p>
                                            <span class="price-old stock-details">Base Game - </span>
                                            <span class="price-new stock-details">₹${product.variants[0].offerPrice}</span>
                                        </p>
                                        <p>
                                            
                                            ${variantPrice}
                                        </p>
                                    </div>
                                    
                                </div>
                                <div class="product-info">
                                    <span class="category">${product.categoryId.name}</span>
                                    <h3 class="product-title">${product.name}</h3>
                                    <p class="description">${product.description}</p>
                                    <div id="btn-div">
                                        ${product.isActive ? `<button class="unlist-btn active" onclick="block('${product._id}', this)">Active</button>` : `<button class="unlist-btn unlisted" onclick="active('${product._id}', this)">Unlisted</button>` }
                                        
                                    </div>
                                </div>
                            </div>
                `
                })

                productGrid.innerHTML = html
                localStorage.setItem('productsCurrentPage', data.currentPage)

                const pagination = document.querySelector('.pagination-container')
                // setting url for next Page
                let tempUrl = new URL(url, window.location.origin);
                let currentPage = parseInt(tempUrl.searchParams.get("currentPage"), 10);
                tempUrl.searchParams.set("currentPage", currentPage+1);

                let nextUrl = tempUrl.pathname + '?' + tempUrl.searchParams.toString();
                
                // setting url for previous page
                tempUrl = new URL(url, window.location.origin);
                currentPage = parseInt(tempUrl.searchParams.get("currentPage"), 10);
                tempUrl.searchParams.set("currentPage", currentPage-1);

                let prevUrl = tempUrl.pathname + '?' + tempUrl.searchParams.toString();

                
                pagination.innerHTML = `
                    <div class="pagination-controls">
                        <button onclick="fetchProducts('${prevUrl}')" class="page-btn" style="${data.currentPage>1? "" : "display:none;"}">&lt;</button>
                        <button class="page-btn active">
                            ${data.currentPage} to ${data.totalPages} Pages
                        </button>
                        <button onclick="fetchProducts('${nextUrl}')" class="page-btn" style="${data.currentPage<data.totalPages? "":"display:none;"}">&gt;</button>
                    </div>
                `
            }).catch(error => console.log(error))
    }


    function active(id, button){

        Swal.fire({
            title: "Are you sure?",
            text: "Do you want to active this",
            icon: "info",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "Yes",
            background: "#242428",
            customClass: {
				popup: 'my-swal-border'
			}
            }).then((result) => {
            if (result.isConfirmed) {

                fetch(`/admin/products/${id}/active`,{
                    method:'PATCH',
                    headers:{
                        'Content-Type': 'application/json'
                    },
                    body:JSON.stringify({isActive:true})
                })
                .then(response => {
                    if(!response.ok){
                        throw new Error("Failed to fetch")
                    }

                    
                    button.classList.remove('unlisted')
                    button.classList.add('active')
                    button.textContent = 'Active'

                    button.setAttribute('onclick', `block('${id}', this)`)
                })
                .catch(error=>{
                    console.log("Error", error)
                })

            }

        });

            
    }

    function block(id, button){

            Swal.fire({
            title: "Are you sure?",
            text: "Do you want to Unlist this",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "Yes",
            background: "#242428",
            customClass: {
				popup: 'my-swal-border'
			}
            }).then((result) => {
            if (result.isConfirmed) {

                fetch(`/admin/products/${id}/block`,{
                    method:'PATCH',
                    headers:{
                        'Content-Type': 'application/json'
                    },
                    body:JSON.stringify({isActive:false})
                })
                .then(response => {
                    if(!response.ok){
                        throw new Error("Failed to fetch")
                    }
                    
                    button.classList.remove('active')
                    button.classList.add('unlisted')
                    button.textContent = 'Unlisted'

                    button.setAttribute('onclick', `active('${id}', this)`)
                })
                .catch(error => {
                    console.log("Error", error)
                })

            }

        });

    }
</script>




