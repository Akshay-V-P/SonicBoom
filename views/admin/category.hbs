<style>

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
    }

    .account-btn {
        background-color: #333;
        color: #fff;
        border: none;
        padding: 8px 16px;
        border-radius: 6px;
        font-size: 14px;
        cursor: pointer;
    }

    .container{
        width: 100%;
        display: flex;
        gap: 20px;
    }

    .page-title {
        font-size: 24px;
        font-weight: 600;
    }

    /* Category Sections */
    .category-list-section {
        background-color: #1a1a1a;
        padding: 30px;
        border-radius: 8px;
        border: 1px solid #333;
        margin-bottom: 30px;
        width: 60%;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }
    
    .category-table-container {
        overflow-x: auto;
    }

    .category-table {
        width: 100%;
        border-collapse: collapse;
    }
    
    .table-header th {
        padding: 15px 12px;
        text-align: left;
        font-size: 12px;
        color: #666;
        text-transform: uppercase;
        font-weight: 500;
        border-bottom: 1px solid #333;
        white-space: nowrap;
    }

    .table-row {
        border-bottom: 1px solid #333;
    }
    
    .table-row:last-child {
        border-bottom: none;
    }

    .table-row td {
        padding: 15px 12px;
        font-size: 14px;
        vertical-align: middle;
        white-space: nowrap;
    }

    .toggle-switch {
        position: relative;
        display: inline-block;
        width: 40px;
        height: 20px;
    }

    .toggle-switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #4a90e2;
        transition: .4s;
        border-radius: 20px;
    }

    .slider:before {
        position: absolute;
        content: "";
        height: 16px;
        width: 16px;
        left: 2px;
        bottom: 2px;
        background-color: white;
        transition: .4s;
        border-radius: 50%;
    }

    input:checked + .slider {
        background-color: #ccc;
    }
    
    input:checked + .slider:before {
        transform: translateX(20px);
    }
    
    .action-btns {
        display: flex;
        gap: 10px;
    }
    
    .action-btn {
        background: none;
        border: none;
        color: #999;
        cursor: pointer;
    }

    .category-add-section {
        background-color: #1a1a1a;
        padding: 30px;
        border-radius: 8px;
        border: 1px solid #333;
        margin-bottom: 30px;
        width: 40%;
    }

    .add-category-form-header {
        font-size: 18px;
        font-weight: 600;
        margin-bottom: 20px;
    }

    .category-form-group {
        margin-bottom: 15px;
    }

    .category-form-group label {
        font-size: 14px;
        color: #ffffff;
        font-weight: 500;
        display: block;
        margin-bottom: 5px;
    }

    .category-form-group input,
    .category-form-group textarea {
        width: 100%;
        padding: 10px 12px;
        border: 1px solid #333;
        border-radius: 4px;
        background-color: #2a2a2a;
        color: #fff;
        font-size: 14px;
        resize: vertical;
    }

    /* Error styling */
    .error-message {
        color: #ff4d4d;
        font-size: 12px;
        margin-top: 4px;
        display: none;
    }
    
    .add-category-btn {
        background-color: #4a90e2;
        color: #fff;
        border: none;
        padding: 12px 24px;
        border-radius: 6px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        width: auto;
    }

    /* Pagination */
    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 20px;
        gap: 10px;
    }

    .page-btn {
        background-color: #4a90e2;
        color: #fff;
        border: none;
        padding: 6px 14px;
        border-radius: 4px;
        font-size: 14px;
        cursor: pointer;
    }

    .page-btn:disabled {
        background-color: #666;
        cursor: not-allowed;
    }

    .page-info {
        font-size: 14px;
        color: #ccc;
    }
    
    .active {
        background-color: #4a90e2; /* Blue */
    }

    .blocked {
        background-color: #e24a4a; /* Red */
    }

    .status-btn {
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 500;
            border: none;
            cursor: pointer;
            color: white;
        }
    @media (max-width: 768px) {
        .category-list-section, .category-add-section {
            padding: 20px;
        }
        .category-table,
        .category-table thead,
        .category-table tbody,
        .category-table th,
        .category-table td,
        .category-table tr {
            display: block;
        }
        
        .category-table thead tr {
            position: absolute;
            top: -9999px;
            left: -9999px;
        }

        .category-table tr {
            border: 1px solid #333;
            margin-bottom: 10px;
            padding: 10px;
            border-radius: 8px;
        }

        .category-table td {
            border: none;
            position: relative;
            padding: 8px 0 8px 30%;
            text-align: right;
        }

        .category-table td:before {
            content: attr(data-label) ": ";
            position: absolute;
            left: 10px;
            width: 28%;
            padding-right: 10px;
            white-space: nowrap;
            color: #666;
            font-size: 12px;
            text-transform: uppercase;
            text-align: left;
        }

        .action-btns {
            justify-content: flex-end;
        }
        
        .add-category-btn {
            width: 100%;
        }

        .container{
            flex-direction: column;
        }

        .category-add-section{
            width: 100%;
        }

        .category-list-section{
            width: 100%;
        }
    }
    
</style>

<input type="text" id="pageName" value="category" hidden>
<input type="text" id="message" value="{{message}}" placeholder="{{icon}}" hidden>
<div class="header">
    <h1 class="page-title">Categories</h1>
    <button class="account-btn">Account</button>
</div>

<div class="container">
    <div class="category-list-section">
        <div class="category-table-container">
            <table class="category-table">
                <thead class="table-header">
                    <tr>
                        <th>S.No</th>
                        <th>Category Name</th>
                        <th>List / Unlist</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody id="tableBody">
                    <tr class="table-row">
                        <td value="${category._id}" class="userId" hidden></td>
                        <td data-label="S.No">1</td>
                        <td data-label="Category Name">${category.name}</td>
                        <td data-label="List / Unlist">
                            <button>${category.isListed}</button>
                        </td>
                        <td>
                            <div class="action-btns">
                                <button class="action-btn">‚úèÔ∏è</button>
                                <button class="action-btn">üóëÔ∏è</button>
                            </div>
                        </td>
                    </tr>
                    <tr class="table-row">
                        <td data-label="S.No">2</td>
                        <td data-label="Category Name">Adventure</td>
                        <td data-label="List / Unlist">
                            <label class="toggle-switch">
                                <input type="checkbox" checked>
                                <span class="slider"></span>
                            </label>
                        </td>
                        <td>
                            <div class="action-btns">
                                <button class="action-btn">‚úèÔ∏è</button>
                                <button class="action-btn">üóëÔ∏è</button>
                            </div>
                        </td>
                    </tr>
                    <tr class="table-row">
                        <td data-label="S.No">3</td>
                        <td data-label="Category Name">Strategy</td>
                        <td data-label="List / Unlist">
                            <label class="toggle-switch">
                                <input type="checkbox" checked>
                                <span class="slider"></span>
                            </label>
                        </td>
                        <td>
                            <div class="action-btns">
                                <button class="action-btn">‚úèÔ∏è</button>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <div class="pagination" id="pagination-container">
            
        </div>
    </div>

    <div class="category-add-section">
        <h2 class="add-category-form-header">Add Category</h2>
        <form id="addCategoryForm" action="/admin/category" method="post" novalidate>
            <div class="category-form-group">
                <label for="categoryName">Category Information</label>
                <input type="text" id="categoryName" name="name" placeholder="Type category name here..." required>
                <div class="error-message" id="categoryNameError">Please enter a category name.</div>
            </div>
            <div class="category-form-group">
                <label for="description">Description</label>
                <textarea id="description" rows="4" name="description" placeholder="Type category description here..." required></textarea>
                <div class="error-message" id="descriptionError">Please enter a description.</div>
            </div>
            <div class="category-form-group">
                <label for="offer">Offer</label>
                <input type="text" id="offer" name="offer" placeholder="Enter offer..." required>
                <div class="error-message" id="offerError">Please enter an offer.</div>
            </div>
            <div>
                <button type="submit" class="add-category-btn" id="submitBtn">Add Category</button>
            </div>
        </form>
    </div>
</div>



<script>

    let current = 1
    let lim = 10
    document.addEventListener('DOMContentLoaded', function(){
        current = localStorage.getItem('currentPage')
        fetchOrders(`/admin/category/search?currentPage=${current}&limit=10`)
    })


document.getElementById("addCategoryForm").addEventListener("submit", function(event) {
    let valid = true;

    const categoryName = document.getElementById("categoryName");
    const description = document.getElementById("description");
    const offer = document.getElementById("offer");

    if (categoryName.value.trim() === "") {
        document.getElementById("categoryNameError").style.display = "block";
        valid = false;
    } else {
        document.getElementById("categoryNameError").style.display = "none";
    }

    if (description.value.trim() === "") {
        document.getElementById("descriptionError").style.display = "block";
        valid = false;
    } else {
        document.getElementById("descriptionError").style.display = "none";
    }

    if (offer.value.trim() === "") {
        document.getElementById("offerError").style.display = "block";
        valid = false;
    } else {
        document.getElementById("offerError").style.display = "none";
    }

    if (!valid) {
        event.preventDefault();
        return
    }
    const submitBtn = document.getElementById('submitBtn')

    event.target.submit()
});



    function fetchOrders(url) {
        fetch(url)
            .then(res => {
                if (!res.ok) throw new Error("Failed to fetch")
                return res.json()
            })
            .then(data => {
                const tbody = document.getElementById('tableBody')
                tbody.innerHTML = ""
                if (data.result.length == 0) {
                    tbody.innerHTML = `<tr><td colspan="6" style="text-align:center;color:#999;">No Categorys found</td></tr>`
                    return
                }
                let index = 0
                data.result.forEach((category) => {
                    tbody.innerHTML += `
                        <tr class="table-row">
                            <td data-label="S.No">1</td>
                            <td data-label="Category Name">${category.name}</td>
                            <td data-label="List / Unlist">
                                ${
                                category.isListed ? `<button class="status-btn active" onclick="block('${category._id}', this)">Listed</button>` : `<button class="status-btn blocked" onclick="active('${category._id}', this)">Unlisted</button>`
                                }
                            </td>
                            <td>
                                <div class="action-btns">
                                    <button class="action-btn orderDetails" value="${category._id}">Edit</button>
                                </div>
                            </td>
                        </tr>`
                })

                document.querySelectorAll('.orderDetails').forEach((e)=>{
                    e.addEventListener('click', ()=>{
                        let id = e.value
                        window.location.href = `/admin/category/${id}`
                    })
                })

                current = data.currentPage
                localStorage.setItem('categoryCurrentPage', current)
                const pagination = document.getElementById('pagination-container')

                // setting url for next Page
                let tempUrl = new URL(url, window.location.origin);
                let currentPage = parseInt(tempUrl.searchParams.get("currentPage"), 10);
                tempUrl.searchParams.set("currentPage", currentPage + 1);

                let nextUrl = tempUrl.pathname + '?' + tempUrl.searchParams.toString();

                // setting url for previous page
                tempUrl = new URL(url, window.location.origin);
                currentPage = parseInt(tempUrl.searchParams.get("currentPage"), 10);
                tempUrl.searchParams.set("currentPage", currentPage - 1);

                let prevUrl = tempUrl.pathname + '?' + tempUrl.searchParams.toString();


                pagination.innerHTML = `
                    ${data.currentPage>1 ? `<button class="page-btn prev" onclick="fetchOrders('${prevUrl}')">Prev</button>`  : ''}
                    <span class="page-info">Page ${data.currentPage} of ${data.totalPages}</span>
                    ${data.currentPage < data.totalPages ? `<button class="page-btn next" onclick="fetchOrders('${nextUrl}')">Next</button>` : ''}
                `


            })
            .catch(error => console.log(error))
    }


    function active(id, button){

            Swal.fire({
            title: "Are you sure?",
            text: "Do you want to active this",
            icon: "info",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "Yes",
            background: "#242428",
            customClass: {
				popup: 'my-swal-border'
			}
            }).then((result) => {
            if (result.isConfirmed) {

                fetch(`/admin/category/${id}/active`,{
                    method:'PATCH',
                    headers:{
                        'Content-Type': 'application/json'
                    },
                    body:JSON.stringify({isListed:true})                            
                })
                .then(response => {
                    if(!response.ok){
                        throw new Error("Failed to fetch")
                    }

                    
                    button.classList.remove('blocked')
                    button.classList.add('active')
                    button.textContent = 'Listed'

                    button.setAttribute('onclick', `block('${id}', this)`)
                })
                .catch(error=>{
                    console.log("Error", error)
                })

            }

        });

    }

    function block(id, button){

        Swal.fire({
            title: "Are you sure?",
            text: "Do you want to Unlist this",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "Yes",
            background: "#242428",
            customClass: {
				popup: 'my-swal-border'
			}
            }).then((result) => {
            if (result.isConfirmed) {

                fetch(`/admin/category/${id}/block`,{
                    method:'PATCH',
                    headers:{
                        'Content-Type': 'application/json'
                    },
                    body:JSON.stringify({isListed:false})
                })
                .then(response => {
                    if(!response.ok){
                        throw new Error("Failed to fetch")
                    }
                    
                    button.classList.remove('active')
                    button.classList.add('blocked')
                    button.textContent = 'Unlisted'

                    button.setAttribute('onclick', `active('${id}', this)`)
                })
                .catch(error => {
                    console.log("Error", error)
                })

            }

        });

    }


    let msgValue = document.getElementById('message').value
	let icon = document.getElementById('message').getAttribute('placeholder')
	if (msgValue) {
		Swal.fire({
			title: msgValue,
			icon: icon,
			background: "#242428",
			color: 'white',
			customClass: {
				popup: 'my-swal-border'
			}
		});
	}
</script>
