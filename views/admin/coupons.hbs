
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>

        .wrapper {
            max-width: 1200px;
            margin: 0 auto;
            padding: 1rem;
        }

        /* Styles that cannot be replicated with Tailwind */
        .coupon-table td:before {
            content: attr(data-label) ": ";
            left: 10px;
            width: 28%;
            padding-right: 10px;
            white-space: nowrap;
            color: #999;
            font-size: 12px;
            text-transform: uppercase;
            text-align: left;
        }
        @media (min-width: 768px) {
            .coupon-table td:before {
                content: none;
            }
        }
        
        .my-swal-border {
            border: 1px solid #3f3f46;
        }

    </style>


    <!-- Message Box for Alerts -->
    <div id="message-box" class="fixed top-4 left-1/2 -translate-x-1/2 p-4 rounded-lg shadow-lg z-50 text-white hidden"></div>
    <input type="text" id="pageName" value="couponManagement" hidden>

    <!-- Main Page Content -->
    <div class="header flex flex-col md:flex-row justify-between items-center gap-4 mb-8">
        <h1 class="page-title text-2xl md:text-3xl font-semibold">Coupon Management</h1>
        <button class="account-btn bg-zinc-800 text-white px-4 py-2 rounded-md text-sm cursor-pointer hover:bg-zinc-700 transition-colors">Account</button>
    </div>

    <div class="wrapper">
        <!-- Add Coupon Modal -->
        <div id="add-coupon-modal" class="fixed inset-0 bg-black bg-opacity-50 z-40 flex items-center justify-center p-4 hidden">
            <div class="coupon-add-form bg-zinc-900 p-6 sm:p-8 rounded-lg border border-zinc-700 w-full max-w-lg mx-auto relative">
                <button id="close-modal-btn" class="absolute top-4 right-4 text-gray-500 hover:text-gray-300">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
                <h2 class="form-title text-xl font-semibold mb-6">Add New Coupon</h2>
                <form id="add-coupon-form">
                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6 mb-6">
                        <div class="form-group flex flex-col gap-2">
                            <label for="coupon-code" class="text-sm text-gray-400">Coupon Code</label>
                            <input type="text" id="coupon-code" placeholder="e.g., BLACKFRIDAY20" class="w-full px-4 py-2 rounded-md border border-zinc-700 bg-zinc-800 text-white text-sm focus:outline-none focus:ring focus:ring-blue-500">
                            <span id="coupon-code-error" class="text-xs text-red-500 hidden"></span>
                        </div>
                        <div class="form-group flex flex-col gap-2">
                            <label for="description" class="text-sm text-gray-400">Description</label>
                            <input type="text" id="description" placeholder="e.g., New User" class="w-full px-4 py-2 rounded-md border border-zinc-700 bg-zinc-800 text-white text-sm focus:outline-none focus:ring focus:ring-blue-500">
                            <span id="description-error" class="text-xs text-red-500 hidden"></span>
                        </div>
                        <div class="form-group flex flex-col gap-2">
                            <label for="discount" class="text-sm text-gray-400">Discount</label>
                            <input type="number" id="discount" placeholder="e.g., 20" class="w-full px-4 py-2 rounded-md border border-zinc-700 bg-zinc-800 text-white text-sm focus:outline-none focus:ring focus:ring-blue-500">
                            <span id="discount-error" class="text-xs text-red-500 hidden"></span>
                        </div>
                        <div class="form-group flex flex-col gap-2">
                            <label for="discount-type" class="text-sm text-gray-400">Discount Type</label>
                            <select id="discount-type" class="w-full px-4 py-2 rounded-md border border-zinc-700 bg-zinc-800 text-white text-sm focus:outline-none focus:ring focus:ring-blue-500">
                                <option value="percentage">Percentage</option>
                                <option value="amount">Amount</option>
                            </select>
                        </div>
                        <div class="form-group flex flex-col gap-2">
                            <label for="max-discount" class="text-sm text-gray-400">Max Discount</label>
                            <input type="number" id="max-discount" placeholder="e.g., 100" class="w-full px-4 py-2 rounded-md border border-zinc-700 bg-zinc-800 text-white text-sm focus:outline-none focus:ring focus:ring-blue-500">
                            <span id="max-discount-error" class="text-xs text-red-500 hidden"></span>
                        </div>
                        <div class="form-group flex flex-col gap-2">
                            <label for="min-purchase" class="text-sm text-gray-400">Min Purchase</label>
                            <input type="number" id="min-purchase" placeholder="e.g., 150" class="w-full px-4 py-2 rounded-md border border-zinc-700 bg-zinc-800 text-white text-sm focus:outline-none focus:ring focus:ring-blue-500">
                            <span id="min-purchase-error" class="text-xs text-red-500 hidden"></span>
                        </div>
                        <div class="form-group flex flex-col gap-2">
                            <label for="expiry-date" class="text-sm text-gray-400">Expiry Date</label>
                            <input type="date" id="expiry-date" class="w-full px-4 py-2 rounded-md border border-zinc-700 bg-zinc-800 text-white text-sm focus:outline-none focus:ring focus:ring-blue-500">
                            <span id="expiry-date-error" class="text-xs text-red-500 hidden"></span>
                        </div>
                        <div class="form-group flex items-center gap-2 mt-4">
                            <input type="checkbox" id="is-active" class="form-checkbox text-blue-500 rounded-md bg-zinc-800 border-zinc-700 focus:ring focus:ring-blue-500" checked>
                            <label for="is-active" class="text-sm text-gray-400">Is Active</label>
                        </div>
                    </div>
                    <button type="submit" class="add-coupon-btn bg-blue-500 text-white px-6 py-3 rounded-md text-base font-semibold cursor-pointer w-full md:w-auto hover:bg-blue-600 transition-colors">
                        Create Coupon
                    </button>
                </form>
            </div>
        </div>

        <div class="coupon-section bg-zinc-900 p-4 sm:p-8 rounded-lg border border-zinc-700 mb-8">
            <div class="flex flex-col sm:flex-row justify-between items-center gap-4 mb-6">
                <h2 class="text-xl font-semibold text-white">All Coupons</h2>
                <button id="show-modal-btn" class="add-coupon-btn bg-blue-500 text-white px-4 py-2 rounded-md text-sm font-semibold cursor-pointer hover:bg-blue-600 transition-colors">
                    + Add New Coupon
                </button>
            </div>

            <!-- New Search, Sort, and Filter Controls -->
            <div class="flex flex-col md:flex-row items-center gap-4 mb-6">
                <!-- Search Input -->
                <div class="flex-grow w-full md:w-auto">
                    <input type="text" id="coupon-search" placeholder="Search by code..." class="w-full px-4 py-2 rounded-md border border-zinc-700 bg-zinc-800 text-white text-sm focus:outline-none focus:ring focus:ring-blue-500">
                </div>
                
                <!-- Filter by Status -->
                <div class="w-full md:w-auto">
                    <select id="status-filter" class="w-full px-4 py-2 rounded-md border border-zinc-700 bg-zinc-800 text-white text-sm focus:outline-none focus:ring focus:ring-blue-500">
                        <option value="">Filter: All</option>
                        <option value="active">Active</option>
                        <option value="unlisted">Inactive</option>
                        <option value="expired">Expired</option>
                        <option value="percentage">Percentage</option>
                        <option value="amount">Amount</option>
                    </select>
                </div>
                
                <!-- Filter by Discount Type -->
                <div class="w-full md:w-auto">
                    <select id="type-filter" class="w-full px-4 py-2 rounded-md border border-zinc-700 bg-zinc-800 text-white text-sm focus:outline-none focus:ring focus:ring-blue-500">
                        <option value="">Sort: Order</option>
                        <option value="1">Ascending</option>
                        <option value="-1">Descending</option>
                    </select>
                </div>
                
                <!-- Sort By -->
                <div class="w-full md:w-auto">
                    <select id="sort-by" class="w-full px-4 py-2 rounded-md border border-zinc-700 bg-zinc-800 text-white text-sm focus:outline-none focus:ring focus:ring-blue-500">
                        <option value="">Sort by: None</option>
                        <option value="expiryDate">Expiry Date</option>
                        <option value="minPurchase">Min Purchase</option>
                        <option value="discount">Discount Amount</option>
                    </select>
                </div>
                <div>
                    <button class="bg-blue-600 text-white px-2 py-1 rounded-md text-md hover:bg-blue-500" id="search-btn">Search</button>
                </div>
                <div>
                    <button class="bg-gray-600 text-white px-2 py-1 rounded-md text-md hover:bg-gray-500" id="reset-btn">Reset</button>
                </div>
            </div>

            <div class="coupon-table-container overflow-x-auto">
                <table class="coupon-table w-full border-collapse">
                    <thead class="table-header hidden md:table-header-group">
                        <tr>
                            <th class="p-4 text-left text-xs text-gray-400 uppercase font-medium border-b border-zinc-700 whitespace-nowrap">Code</th>
                            <th class="p-4 text-left text-xs text-gray-400 uppercase font-medium border-b border-zinc-700 whitespace-nowrap">Description</th>
                            <th class="p-4 text-left text-xs text-gray-400 uppercase font-medium border-b border-zinc-700 whitespace-nowrap">Discount</th>
                            <th class="p-4 text-left text-xs text-gray-400 uppercase font-medium border-b border-zinc-700 whitespace-nowrap">Max Discount</th>
                            <th class="p-4 text-left text-xs text-gray-400 uppercase font-medium border-b border-zinc-700 whitespace-nowrap">Min Purchase</th>
                            <th class="p-4 text-left text-xs text-gray-400 uppercase font-medium border-b border-zinc-700 whitespace-nowrap">Expiry Date</th>
                            <th class="p-4 text-left text-xs text-gray-400 uppercase font-medium border-b border-zinc-700 whitespace-nowrap">Status</th>
                            <th class="p-4 text-left text-xs text-gray-400 uppercase font-medium border-b border-zinc-700 whitespace-nowrap">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="coupon-table-body">
                        <!-- Coupon rows will be rendered here by JavaScript -->
                    </tbody>
                </table>
            </div>
            <!-- Pagination Controls -->
            <div id="pagination-controls" class="flex justify-center items-center gap-4 mt-6 pagination-container">
                
            </div>
        </div>

        
    </div>
<script src="/scripts/formater.js"></script>
    <script>
        let currentUrl 
        document.addEventListener('DOMContentLoaded', () => {
            const showModalBtn = document.getElementById('show-modal-btn');
            const closeModalBtn = document.getElementById('close-modal-btn');
            const modal = document.getElementById('add-coupon-modal');
            const addCouponForm = document.getElementById('add-coupon-form');
            const messageBox = document.getElementById('message-box');

            // Get new UI elements for search, sort, and filter
            const couponSearchInput = document.getElementById('coupon-search');
            const statusFilterSelect = document.getElementById('status-filter');
            const typeFilterSelect = document.getElementById('type-filter');
            const sortBySelect = document.getElementById('sort-by');

            document.getElementById("search-btn").addEventListener("click", paginatePage)
            
            const showMessage = (message, isError = false) => {
                messageBox.textContent = message;
                messageBox.classList.remove('hidden');
                messageBox.classList.add(isError ? 'bg-red-500' : 'bg-green-500');
                setTimeout(() => {
                    messageBox.classList.add('hidden');
                    messageBox.classList.remove('bg-red-500', 'bg-green-500');
                }, 3000);
            };

            showModalBtn.addEventListener('click', () => {
                modal.classList.remove('hidden');
            });

            closeModalBtn.addEventListener('click', () => {
                modal.classList.add('hidden');
            });

            const clearErrors = () => {
                document.querySelectorAll('.error-message').forEach(span => {
                    span.textContent = '';
                    span.classList.add('hidden');
                });
                document.querySelectorAll('input, select').forEach(input => {
                    input.classList.remove('border-red-500');
                });
            };

            const validateForm = () => {
                clearErrors();
                let isValid = true;

                const code = document.getElementById('coupon-code');
                const description = document.getElementById('description');
                const discount = document.getElementById('discount');
                const maxDiscount = document.getElementById('max-discount');
                const minPurchase = document.getElementById('min-purchase');
                const expiryDate = document.getElementById('expiry-date');

                if (!code.value.trim()) {
                    document.getElementById('coupon-code-error').textContent = 'Coupon code is required.';
                    document.getElementById('coupon-code-error').classList.remove('hidden');
                    code.classList.add('border-red-500');
                    isValid = false;
                }

                if (!description.value.trim()) {
                    document.getElementById('description-error').textContent = 'Description is required.';
                    document.getElementById('description-error').classList.remove('hidden');
                    description.classList.add('border-red-500');
                    isValid = false;
                }

                if (Number(discount.value) < 0) {
                    document.getElementById('discount-error').textContent = 'Discount cannot be negative.';
                    document.getElementById('discount-error').classList.remove('hidden');
                    discount.classList.add('border-red-500');
                    isValid = false;
                } else if (!discount.value) {
                    document.getElementById('discount-error').textContent = 'Discount is required.';
                    document.getElementById('discount-error').classList.remove('hidden');
                    discount.classList.add('border-red-500');
                    isValid = false;
                }


                if (Number(maxDiscount.value) < 0) {
                    document.getElementById('max-discount-error').textContent = 'Max discount cannot be negative.';
                    document.getElementById('max-discount-error').classList.remove('hidden');
                    maxDiscount.classList.add('border-red-500');
                    isValid = false;
                } else if (!maxDiscount.value) {
                    document.getElementById('max-discount-error').textContent = 'Max discount is required.';
                    document.getElementById('max-discount-error').classList.remove('hidden');
                    maxDiscount.classList.add('border-red-500');
                    isValid = false;
                }
                
                if (Number(minPurchase.value) < 0) {
                    document.getElementById('min-purchase-error').textContent = 'Min purchase cannot be negative.';
                    document.getElementById('min-purchase-error').classList.remove('hidden');
                    minPurchase.classList.add('border-red-500');
                    isValid = false;
                } else if (!minPurchase.value) {
                    document.getElementById('min-purchase-error').textContent = 'Min purchase is required.';
                    document.getElementById('min-purchase-error').classList.remove('hidden');
                    minPurchase.classList.add('border-red-500');
                    isValid = false;
                }

                if (!expiryDate.value) {
                    document.getElementById('expiry-date-error').textContent = 'Expiry date is required.';
                    document.getElementById('expiry-date-error').classList.remove('hidden');
                    expiryDate.classList.add('border-red-500');
                    isValid = false;
                } else {
                    const selectedDate = new Date(expiryDate.value);
                    const today = new Date();
                    today.setHours(0, 0, 0, 0); // Normalize today's date

                    if (selectedDate < today) {
                        document.getElementById('expiry-date-error').textContent = 'Expiry date must be a future date.';
                        document.getElementById('expiry-date-error').classList.remove('hidden');
                        expiryDate.classList.add('border-red-500');
                        isValid = false;
                    }
                }

                return isValid;
            };

            addCouponForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                if (!validateForm()) {
                    return;
                }

                const code = document.getElementById('coupon-code').value;
                const description = document.getElementById('description').value;
                const discount = document.getElementById('discount').value;
                const discountType = document.getElementById('discount-type').value;
                const maxDiscount = document.getElementById('max-discount').value;
                const minPurchase = document.getElementById('min-purchase').value;
                const expiryDate = document.getElementById('expiry-date').value;
                const isActive = document.getElementById('is-active').checked;

                const newCoupon = {
                    code,
                    description,
                    discount: Number(discount),
                    discountType,
                    maxDiscount: Number(maxDiscount),
                    minPurchase: Number(minPurchase),
                    isActive,
                    expiryDate: new Date(expiryDate).toISOString(),
                };

                try {
                    const response = await fetch('/admin/coupons/add', {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(newCoupon),
                    });

                    if (response.ok) {
                        const result = await response.json();
                        showMessage('Coupon added successfully!');
                        
                        renderCoupons("/admin/api/coupons?sort=createdAt&currentPage=1&limit=9");

                        addCouponForm.reset();
                        modal.classList.add('hidden');
                    } else {
                        const errorData = await response.json();
                        showMessage(`Error: ${errorData.message || 'Failed to add coupon.'}`, true);
                    }
                } catch (error) {
                    showMessage(`Network error: ${error.message}`, true);
                }
            });

            // Initial render
            renderCoupons("/admin/api/coupons?sort=createdAt&currentPage=1&limit=9");

            // reset btn 
            document.getElementById("reset-btn").addEventListener("click", ()=>{
                const couponSearchInput = document.getElementById('coupon-search');
                const filterSelect = document.getElementById('status-filter');
                const sortOrderSelect = document.getElementById('type-filter');
                const sortBySelect = document.getElementById('sort-by')

                couponSearchInput.value = ""
                filterSelect.selectedIndex = 0
                sortOrderSelect.selectedIndex = 0
                sortBySelect.selectedIndex = 0

                renderCoupons("/admin/api/coupons?sort=createdAt&currentPage=1&limit=9");


            })
            
        });



        function paginatePage(){
            const couponSearchInput = document.getElementById('coupon-search');
            const filterSelect = document.getElementById('status-filter');
            const sortOrderSelect = document.getElementById('type-filter');
            const sortBySelect = document.getElementById('sort-by')

            const searchTerm = couponSearchInput.value;
            console.log(searchTerm)
            const filter = filterSelect.value;
            const orderFilter = sortOrderSelect.value;
            const sortBy = sortBySelect.value;

            console.log(searchTerm)
            console.log(filter)
            console.log(orderFilter)
            console.log(sortBy)

            let url = "/admin/api/coupons?"
            if(searchTerm){
                url += `search=${searchTerm}&`
            }
            if(filter){
                url += `filter=${filter}&`
            }
            if(orderFilter){
                url += `order=${orderFilter}&`
            }
            if(sortBy){
                url += `sort=${sortBy}&`
            }

            url += `currentPage=1&limit=9`
            renderCoupons(url)
        }

        // The render function remains unchanged and fetches data from the server
        const renderCoupons = (url) => {
            currentUrl = url
            console.log("rendering")
            const tableBody = document.getElementById('coupon-table-body');
                fetch(url)
                    .then(response => {
                        if(!response.ok) throw new Error("Can't fetch coupon")
                        return response.json()
                    })
                    .then(data =>{
                        tableBody.innerHTML = '';
                        data.result.forEach(coupon => {
                            const isExpired = new Date(coupon.expiryDate) < new Date();
                            const statusText = isExpired ? 'Expired' : (coupon.isActive ? 'Active' : 'Inactive');
                            let statusClass = '';
                            if (isExpired) {
                                statusClass = 'bg-red-500 text-zinc-900';
                            } else if (coupon.isActive) {
                                statusClass = 'bg-green-500 text-zinc-900';
                            } else {
                                statusClass = 'bg-gray-500 text-zinc-900';
                            }
                            
                            const discountDisplay = coupon.discountType === 'percentage' ? `${coupon.discount}% off` : `₹${coupon.discount} off`;

                            const date = new Date(coupon.expiryDate);
                            const day = String(date.getUTCDate()).padStart(2, "0");
                            const month = String(date.getUTCMonth() + 1).padStart(2, "0"); // Months are 0-based
                            const year = date.getUTCFullYear();

                            const formattedDate = `${day}-${month}-${year}`;

                            const row = document.createElement('tr');
                            row.className = 'table-row border-b border-zinc-700 md:border-none md:table-row';
                            row.innerHTML = `
                                <td data-label="Code" class="p-4 text-sm align-middle whitespace-nowrap block md:table-cell">${coupon.code}</td>
                                <td data-label="Description" class="p-4 text-sm align-middle whitespace-nowrap block md:table-cell">${coupon.description}</td>
                                <td data-label="Discount" class="p-4 text-sm align-middle whitespace-nowrap block md:table-cell">${discountDisplay}</td>
                                <td data-label="Max Discount" class="p-4 text-sm align-middle whitespace-nowrap block md:table-cell">${formatINR(coupon.maxDiscount)}</td>
                                <td data-label="Min Purchase" class="p-4 text-sm align-middle whitespace-nowrap block md:table-cell">${formatINR(coupon.minPurchase)}</td>
                                <td data-label="Expiry Date" class="p-4 text-sm align-middle whitespace-nowrap block md:table-cell">${formattedDate}</td>
                                <td data-label="Status" class="p-4 text-sm align-middle whitespace-nowrap block md:table-cell">
                                    <button onclick="${coupon.isActive? `block('${coupon._id}', this)` : `active('${coupon._id}', this)`}"><span class="inline-block px-3 py-1 rounded-full text-xs font-medium text-center ${statusClass}">${statusText}</span></button>
                                </td>
                                <td data-label="Actions" class="p-4 text-sm align-middle whitespace-nowrap block md:table-cell">
                                    <a href="/admin/coupons/edit?couponId=${coupon._id}"><button class="bg-gray-600 text-white px-2 py-1 rounded-md text-xs hover:bg-gray-500">Edit</button></a>
                                </td>
                            `;
                            tableBody.appendChild(row);
                        });

                        const pagination = document.querySelector('.pagination-container')
                            // setting url for next Page
                            let tempUrl = new URL(url, window.location.origin);
                            let currentPage = parseInt(tempUrl.searchParams.get("currentPage"), 10);
                            tempUrl.searchParams.set("currentPage", currentPage+1);

                            let nextUrl = tempUrl.pathname + '?' + tempUrl.searchParams.toString();
                            
                            // setting url for previous page
                            tempUrl = new URL(url, window.location.origin);
                            currentPage = parseInt(tempUrl.searchParams.get("currentPage"), 10);
                            tempUrl.searchParams.set("currentPage", currentPage-1);

                            let prevUrl = tempUrl.pathname + '?' + tempUrl.searchParams.toString();

                            pagination.innerHTML = `
                                <div class="pagination-controls">
                                    <button onclick="renderCoupons('${prevUrl}')" class="bg-gray-600 text-white px-2 py-1 rounded-sm text-xs hover:bg-gray-500 page-btn" style="${data.currentPage>1? "" : "display:none;"}">&lt;</button>
                                    <button class="page-btn active">
                                        ${data.currentPage} of ${data.totalPages} Pages
                                    </button>
                                    <button onclick="renderCoupons('${nextUrl}')" class="bg-gray-600 text-white px-2 py-1 rounded-sm text-xs hover:bg-gray-500 page-btn" style="${data.currentPage<data.totalPages? "":"display:none;"}">&gt;</button>
                                </div>
                            `
                    })
                
        };

        function active(id, button) {
            Swal.fire({
                title: "Are you sure?",
                text: "Do you want to active this Coupon",
                icon: "info",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes",
                background: "#242428",
                customClass: {
                    popup: 'my-swal-border'
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/admin/api/coupons/${id}/active`, {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ isActive: true })
                    }).then(response => {
                        if (!response.ok) {
                            throw new Error("Failed to fetch")
                        }
                        renderCoupons(currentUrl)
                        console.log("Active request sent. The table will re-render if the local data changes.");
                    }).catch(error => {
                        console.log("Error", error);
                    });
                }
            });
        }

        function block(id, button) {
            Swal.fire({
                title: "Are you sure?",
                text: "Do you want to Block this Coupon",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes",
                background: "#242428",
                customClass: {
                    popup: 'my-swal-border'
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/admin/api/coupons/${id}/block`, {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ isActive: false })
                    }).then(response => {
                        if (!response.ok) {
                            throw new Error("Failed to fetch")
                        }
                        renderCoupons(currentUrl)
                        console.log("Block request sent. The table will re-render if the local data changes.");
                    }).catch(error => {
                        console.log("Error", error);
                    });
                }
            });
        }
    </script>

