<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.1/cropper.min.css">

    <style>

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }

        .account-btn {
            background-color: #333;
            color: #fff;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 14px;
            cursor: pointer;
        }

        .page-title {
            font-size: 24px;
            font-weight: 600;
        }

    
        .edit-product-form {
            background-color: #1a1a1a;
            padding: 30px;
            border-radius: 8px;
            border: 1px solid #333;
            max-width: 900px;
            margin: 0 auto;
        }

        .form-section-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 20px;
        }
        
        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            font-size: 14px;
            margin-bottom: 8px;
            color: #999;
        }
        
        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 12px;
            border: 1px solid #333;
            border-radius: 6px;
            background-color: #2a2a2a;
            color: #fff;
            font-size: 14px;
        }
        
        .form-group input::placeholder,
        .form-group select::placeholder {
            color: #666;
        }
        
        .form-group textarea {
            min-height: 150px; 
            resize: none; 
            overflow-y: hidden; 
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 20px;
        }
        
        .full-width {
            grid-column: 1 / -1;
        }

        .image-upload-container {
            display: flex;
            gap: 20px;
            margin-top: 20px;
            flex-wrap: wrap;
        }

        .image-upload-box {
            flex: 1;
            min-width: 150px;
            border: 2px dashed #4a90e2;
            border-radius: 8px;
            padding: 10px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            text-align: center;
            position: relative;
        }

        .image-upload-box img {
            width: 100%;
            height: auto;
            object-fit: cover;
            border-radius: 4px;
        }

        .image-upload-box p {
            font-size: 14px;
            color: #999;
            margin-top: 10px;
        }

        .image-upload-box .remove-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            background-color: rgba(226, 74, 74, 0.8);
            color: #fff;
            border: none;
            border-radius: 2px;
            padding: 2px;
            height: 20px;
            font-size: 12px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .edit-edition-container {
            margin-top: 40px;
            border-top: 1px solid #333;
            padding-top: 30px;
        }
        
        .add-edition-btn {
            background-color: #4a90e2;
            color: #fff;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 14px;
            cursor: pointer;
            margin-top: 20px;
            margin-left: 30%;
        }
        
        .form-actions {
            margin-top: 30px;
            text-align: right;
            justify-content: end;
            display: flex;
            padding-right: 10%;
            margin-bottom: 24px;
        }

        .add-product-submit {
            background-color: #4a90e2;
            color: #fff;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
        }

        /* Modal for cropping */
    .cropper-modal {
        top: 0; left: 0; right: 0; bottom: 0;
        background: rgba(0,0,0,0.8);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    #cropConfirm{
        z-index: 9999;
    }

    .cropper-container {
        position: relative;
    }

    .cropper-container-box {
        background: #222;
        padding: 20px;
        border-radius: 8px;
        max-width: 90%;
        max-height: 90%;
    }
    .cropper-container-box img {
        max-width: 100%;
    }
    .cropper-buttons {
        margin-top: 10px;
        text-align: right;
    }
    .cropper-buttons button {
        background: #4a90e2;
        border: none;
        color: #fff;
        padding: 8px 16px;
        margin-left: 10px;
        cursor: pointer;
        border-radius: 4px;
    }

    .breadcrumb{
    display: flex;
    gap: 4px;
    }

    .icon{
        padding-top: 1%;
    }

    .thumbnail{
        aspect-ratio: 3/4;
        min-width: 150px;
        max-width: 240px;
        border: 2px dashed #4a90e2;
        border-radius: 8px;
        padding: 10px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        position: relative;
    }

    .editionThumb{
        max-width: 280px;
    }

    /* Add this to your existing <style> block on the form page */

    .add-product-submit {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .add-product-submit:disabled {
        opacity: 0.7;
        cursor: not-allowed;
    }

    .spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: #fff;
        animation: spin 1s ease-in-out infinite;
        margin-right: 10px;
    }

    @keyframes spin {
        to { transform: rotate(360deg); }
    }

        @media (max-width: 768px) {
            .header {
                flex-direction: column;
                gap: 15px;
                align-items: stretch;
            }
            
            .edit-product-form {
                padding: 20px;
            }

            .form-grid {
                grid-template-columns: 1fr;
            }

            .image-upload-container {
                flex-direction: column;
            }

        }

    </style>

            <div class="header">
                <div class="breadcrumb">
                    <a href="/admin/products" style="text-decoration: none; color:white;"><h2 class="page-title">Products</h2></a>
                    <span class="material-symbols-outlined icon">
                        arrow_forward_ios
                    </span> 
                <h2 class="page-title">Edit Product</h2>
            </div>
                <button class="account-btn">Account</button>
            </div>
            <input type="text" id="pageName" name="product" value="products" hidden>
    {{#if product}}
            <form class="edit-product-form" action="/admin/products/edit" method="POST" enctype="multipart/form-data">
                <div class="form-group">
                    <h2 class="form-section-title">Product details</h2>
                </div>

                <input type="text" id="productId" name="productId" value="{{product._id}}" hidden>

                <div class="form-grid">
                    <div class="form-group">
                        <label for="productName">Product Name</label>
                        <input type="text" id="productName" name="name" value="{{product.name}}">
                    </div>
                    <div class="form-group">
                        <label for="developer">Developer</label>
                        <input type="text" id="developer" name="developer" value="{{product.developer}}">
                    </div>
                    <div class="form-group">
                        <label for="category">Category</label>
                        <select name="category" id="category">
                            {{#each categorys}}
                            <option value="{{this._id}}" {{#if (eq ../product.categoryId this._id)}}selected{{/if}}>{{this.name}}</option>
                            {{/each}}
                        </select>
                    </div>
                    <div class="form-group full-width">
                        <label for="description">Description</label>
                        <textarea id="description" name="description">{{product.description}}</textarea>
                    </div>
                    <div class="form-group">
                        <label for="price">Price</label>
                        <input type="text" id="price" name="price" value="{{product.variants.0.price}}">
                    </div>
                    <div class="form-group">
                        <label for="offer">Offer</label>
                        <input type="text" id="offer" name="offer" value="{{product.offer}}">
                    </div>
                    <div class="form-group">
                        <label for="stock">Stock</label>
                        <input type="text" id="offer" name="stock" value="{{product.variants.0.stock}}">
                    </div>
                    
                </div>
                <div class="form-group">
                    <h2 class="form-section-title">Images</h2>
                </div>

                <div class="image-upload-container">
                    {{#each product.coverImage}}
                    <div class="image-upload-box">
                        <button class="remove-btn">Change</button>
                        <img src="{{this}}">
                        <p>Cover</p>
                    </div>
                    {{/each}}
                    <div class="image-upload-box">
                        <button class="remove-btn">Change</button>
                        <img src="{{product.variants.0.thumbnail}}" >
                        <p>Thumbnail</p>
                    </div>
                </div>
                {{#if product.variants}}
                {{#each product.variants}}
                {{#unless @first}}
                <div class="edit-edition-container">
                    <h2 class="form-section-title">Editions</h2>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="editionName">Product Name</label>
                            <input type="text" id="editionName" value="{{this.name}}">
                        </div>
                        <div class="form-group">
                            <label for="editionPrice">Price</label>
                            <input type="text" id="editionPrice" value="{{this.price}}">
                        </div>
                    </div>
                    <div class="image-upload-container">
                        <div class="image-upload-box thumbnail">
                            <button class="remove-btn">x</button>
                            <img src="{{this.thumbnail}}" alt="GTA V Premium Thumbnail">
                            <p>Thumbnail</p>
                        </div>
                    </div>
                    {{/unless}}
                    {{/each}}
                    {{/if}}
                    
                </div>

                <div id="edition-wrapper">

                </div>
                <button type="button" class="add-edition-btn">Add Edition</button>
                <div class="form-actions">
                    <button type="submit" class="add-product-submit">Update</button>
                </div>
    {{/if}}
            </form>
        </main>
    </div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.1/cropper.min.js"></script>
<script>
// Add styles for validation errors
const style = document.createElement('style');
style.innerHTML = `
    .form-group input.error,
    .form-group select.error,
    .form-group textarea.error {
        border-color: #e57373; /* A soft red for dark mode */
    }
    .error-message {
        color: #ef5350;
        font-size: 13px;
        margin-top: 6px;
        display: block;
    }
`;
document.head.appendChild(style);


window.addEventListener('DOMContentLoaded', function () {
    let cropper;
    let currentImageElement;
    let currentType;
    let currentEditionIndex; 
    let coverIndex
    const aspectRatios = { cover: 16 / 9, thumbnail: 3 / 4, edition: 3 / 4 };

    // Hidden file input
    const fileInput = document.createElement('input');
    fileInput.type = 'file';
    fileInput.accept = 'image/jpeg,image/png,image/gif';
    fileInput.style.display = 'none';
    document.body.appendChild(fileInput);

    // Crop modal
    const modal = document.createElement('div');
    modal.id = 'cropModal';
    modal.style.cssText = `
        display:none; position:fixed; top:0; left:0; width:100%; height:100%;
        background:rgba(0,0,0,0.8); justify-content:center; align-items:center; z-index:9999;
    `;
    modal.innerHTML = `
        <div style="background:#1a1a1a; padding:20px; border-radius:8px; border:1px solid #333; max-width:90%; max-height:90%; display:flex; flex-direction:column; align-items:center;">
            <img id="cropImage" style="max-width:100%; max-height:70vh; object-fit:contain; border-radius:6px;">
            <div style="margin-top:10px; text-align:right;">
                <button id="cropConfirm" class="btn-confirm" style="background:#4a90e2;color:white;padding:8px 16px;border:none;border-radius:6px;font-size:14px;cursor:pointer;">Crop & Save</button>
                <button id="cropCancel" class="btn-cancel" style="background:#333;color:white;padding:8px 16px;border:none;border-radius:6px;font-size:14px;cursor:pointer;margin-left:8px;">Cancel</button>
            </div>
        </div>
    `;
    document.body.appendChild(modal);

    const cropImageEl = modal.querySelector('#cropImage');
    const cropConfirmBtn = modal.querySelector('#cropConfirm');
    const cropCancelBtn = modal.querySelector('#cropCancel');

    
    function attachCropListeners() {
        document.querySelectorAll('.image-upload-box .remove-btn, .thumbnail .remove-btn').forEach(btn => {
            btn.onclick = function (e) {
                e.preventDefault();
                currentImageElement = this.nextElementSibling;
                const labelText = this.parentElement.querySelector('p')?.innerText.toLowerCase() || '';

                if (labelText.includes('cover')) {
                    currentType = 'cover';
                    coverIndex = Array.from(
                    document.querySelectorAll('.image-upload-container .image-upload-box')
                    ).indexOf(this.parentElement);
                } else if (this.closest('.edit-edition-container')) {
                    currentType = 'edition';
                    currentEditionIndex = currentImageElement.dataset.index; 
                } else {
                    currentType = 'thumbnail';
                }

                fileInput.click();
            };
        });
    }

    attachCropListeners();

    
    fileInput.addEventListener('change', function () {
        if (this.files.length !== 1) return;
        const file = this.files[0];
        const reader = new FileReader();
        reader.onload = function (e) {
            cropImageEl.src = e.target.result;
            modal.style.display = 'flex';

            if (cropper) cropper.destroy();
            cropper = new Cropper(cropImageEl, {
                aspectRatio: aspectRatios[currentType],
                viewMode: 1,
                background: false
            });
        };
        reader.readAsDataURL(file);
    });

    cropConfirmBtn.addEventListener('click', function () {
        if (!cropper) return;
        const canvas = cropper.getCroppedCanvas();
        canvas.toBlob(function (blob) {
            const file = new File([blob], `${currentType}_${Date.now()}.jpg`, { type: "image/jpeg" });

            currentImageElement.src = URL.createObjectURL(file);

            let hiddenInput;
            if (currentType === "edition") {
                hiddenInput = document.querySelector(`input[name="variants[${currentEditionIndex}][thumbnail]"]`);
                if (!hiddenInput) {
                    hiddenInput = document.createElement('input');
                    hiddenInput.type = 'file';
                    hiddenInput.name = `variants[${currentEditionIndex}][thumbnail]`;
                    hiddenInput.style.display = 'none';
                    document.querySelector('form').appendChild(hiddenInput);
                }
            } else {
                const inputName = `${currentType}Image[${coverIndex}]`;
                hiddenInput = document.querySelector(`input[name="${inputName}"]`);
                if (!hiddenInput) {
                    hiddenInput = document.createElement('input');
                    hiddenInput.type = 'file';
                    hiddenInput.name = inputName;
                    hiddenInput.style.display = 'none';
                    document.querySelector('form').appendChild(hiddenInput);
                }
            }

            const dt = new DataTransfer();
            dt.items.add(file);
            hiddenInput.files = dt.files;

            modal.style.display = 'none';
            if (cropper) cropper.destroy();
            cropper = null;
            fileInput.value = '';
        }, 'image/jpeg');
    });

    cropCancelBtn.addEventListener('click', function () {
        modal.style.display = 'none';
        if (cropper) {
            cropper.destroy();
            cropper = null;
        }
        fileInput.value = '';
    });

    let varIndex = -1;

    document.querySelector('.add-edition-btn').addEventListener('click', () => {
        varIndex++;
        const editionContainer = document.querySelector('#edition-wrapper');
        const newEditionHTML = `
            <div class="edit-edition-container" style="border-top:1px solid #333; padding-top:30px; margin-top:20px;">
                <h2 class="form-section-title">New Edition</h2>
                <div class="form-grid">
                    <div class="form-group">
                        <label for="editionName_${varIndex}">Edition Name</label>
                        <input type="text" id="editionName_${varIndex}" name="variants[${varIndex}][name]" placeholder="Enter name">
                    </div>
                    <div class="form-group">
                        <label for="editionPrice_${varIndex}">Price</label>
                        <input type="text" id="editionPrice_${varIndex}" name="variants[${varIndex}][price]" placeholder="Enter Price">
                    </div>
                    <div class="form-group">
                        <label for="editionStock_${varIndex}">Stock</label>
                        <input type="text" id="editionStock_${varIndex}" name="variants[${varIndex}][stock]" placeholder="Enter Stock">
                    </div>
                </div>
                <div class="image-upload-container">
                    <div class="thumbnail">
                        <button type="button" class="remove-btn">Upload</button>
                        <img src="https://via.placeholder.com/150x200.png?text=Edition+Thumb" 
                            class="editionThumb" 
                            data-index="${varIndex}" 
                            alt="Edition Thumbnail">
                        <p>Thumbnail</p>
                    </div>
                </div>
            </div>
        `;
        
        editionContainer.insertAdjacentHTML('beforeend', newEditionHTML);
        attachCropListeners();
    });
});

const form = document.querySelector('.edit-product-form');


function clearErrors() {
    form.querySelectorAll('.error-message').forEach(el => el.remove());
    form.querySelectorAll('.error').forEach(el => el.classList.remove('error'));
}


function showError(inputElement, message) {
    inputElement.classList.add('error');
    const formGroup = inputElement.closest('.form-group');
    if (formGroup) {
        const error = document.createElement('span');
        error.className = 'error-message';
        error.textContent = message;
        formGroup.appendChild(error);
    }
}


function validateForm() {
    let isValid = true;

    // --- Main Product Fields ---
    const productName = form.querySelector('#productName');
    const developer = form.querySelector('#developer');
    const description = form.querySelector('#description');
    const price = form.querySelector('#price');
    const offer = form.querySelector('input[name="offer"]');
    const stock = form.querySelector('input[name="stock"]');

    if (productName.value.trim() === '') {
        showError(productName, 'Product name cannot be empty.');
        isValid = false;
    }
    if (developer.value.trim() === '') {
        showError(developer, 'Developer name cannot be empty.');
        isValid = false;
    }
    if (description.value.trim().length < 10) {
        showError(description, 'Description must be at least 10 characters long.');
        isValid = false;
    }
    if (price.value.trim() === '' || isNaN(price.value) || Number(price.value) <= 0) {
        showError(price, 'Price must be a valid positive number.');
        isValid = false;
    }
    if (offer.value.trim() !== '' && (isNaN(offer.value) || Number(offer.value) < 0 || Number(offer.value) >= Number(price.value))) {
        showError(offer, 'Offer must be a number smaller than the price.');
        isValid = false;
    }
    if (stock.value.trim() === '' || !/^\d+$/.test(stock.value) || parseInt(stock.value) < 0) {
        showError(stock, 'Stock must be a non-negative integer (e.g., 0, 1, 50).');
        isValid = false;
    }

    // --- Dynamically Added Edition Fields ---
    document.querySelectorAll('.edit-edition-container').forEach(container => {
        const editionName = container.querySelector('input[name*="[name]"]');
        const editionPrice = container.querySelector('input[name*="[price]"]');
        const editionStock = container.querySelector('input[name*="[stock]"]');
        
        if(editionName && editionName.value.trim() === ''){
            showError(editionName, 'Edition name is required.');
            isValid = false;
        }
        if(editionPrice && (editionPrice.value.trim() === '' || isNaN(editionPrice.value) || Number(editionPrice.value) <= 0)){
            showError(editionPrice, 'Edition price must be a positive number.');
            isValid = false;
        }
        if(editionStock && (editionStock.value.trim() === '' || !/^\d+$/.test(editionStock.value) || parseInt(editionStock.value) < 0)){
            showError(editionStock, 'Edition stock must be a non-negative integer.');
            isValid = false;
        }
    });


    return isValid;
}

const submitButton = document.querySelector('.add-product-submit')

form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    
    clearErrors();
    
    const isFormValid = validateForm();

   
    if (!isFormValid) {
        Swal.fire({
            title: "Check Your Form",
            background: "#242428",
            color: "#fff",
            text: "Please fix the errors before submitting.",
            icon: "warning",
            customClass: { popup: 'my-swal-border' }
        });
        return; 
    }

    const originalButtonText = submitButton.innerHTML;
    
    submitButton.disabled = true;
    submitButton.innerHTML = `<span class="spinner"></span>Processing...`;

    const formData = new FormData(form);

    try {
        const response = await fetch(`/admin/products/${formData.get('productId')}/edit`, {
            method: "PATCH", 
            body: formData
        });

        if (response.ok) {
            Swal.fire({
                title: 'Success!',
                text: 'Product updated successfully.',
                icon: 'success',
                background: "#242428",
                color: "#fff",
                timer: 2000,
                showConfirmButton: false
            }).then(() => {
                window.location.href = "/admin/products";
            });
        } else {
             const errorData = await response.json();
             Swal.fire({
                 title: "Update Failed",
                 background: "#242428",
                 color: "#fff",
                 text: errorData.message || "An unknown error occurred.",
                 icon: "error",
                 customClass: { popup: 'my-swal-border' }
             });

             submitButton.disabled = false
             submitButton.innerHTML = originalButtonText
        }
    } catch (error) {
         Swal.fire({
             title: "Network Error",
             background: "#242428",
             color: "#fff",
             text: "Could not connect to the server.",
             icon: "error",
             customClass: { popup: 'my-swal-border' }
         });

         submitButton.disabled = false
         submitButton.innerHTML = originalButtonText
    }
});
</script>

